{"ast":null,"code":"import React,{useRef}from'react';import{CSVLink}from'react-csv';import html2canvas from'html2canvas';import DownloadSharpIcon from'@mui/icons-material/DownloadSharp';import{Chart}from'react-chartjs-2';import jsPDF from'jspdf';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const ExportData=_ref=>{let{message,user_query}=_ref;const chartRef=useRef(null);const convertMessageToCSVData=(message,user_query)=>{const csvData=[];// Add user_query at the top of the CSV data\nif(user_query){csvData.push([\"User Query: \".concat(user_query)]);csvData.push([]);// Add an empty row for separation\n}// Convert message data to CSV format\nif(message.table&&message.table.headers&&message.table.rows){csvData.push(message.table.headers);csvData.push(...message.table.rows);}else if(message.text){csvData.push([message.text]);}return csvData;};const downloadChartAsPDF=async()=>{if(chartRef.current){try{const canvas=await html2canvas(chartRef.current,{scale:2,// Increase resolution\nuseCORS:true,// Handle cross-origin images\nbackgroundColor:null// Transparent background\n});const imgData=canvas.toDataURL('image/png');const pdf=new jsPDF({orientation:'landscape',unit:'px',format:[canvas.width,canvas.height]// Match PDF size to canvas size\n});// Add user_query at the top of the PDF\nif(user_query){pdf.text(\"User Query: \".concat(user_query),10,10);}pdf.addImage(imgData,'PNG',0,20,canvas.width,canvas.height);// Adjust Y position for chart\npdf.save(\"chart-\".concat(new Date().toISOString(),\".pdf\"));}catch(error){console.error(\"Failed to download chart as PDF\",error);}}};const csvData=convertMessageToCSVData(message,user_query);const fileName=\"chatbot-response-\".concat(new Date().toISOString(),\".csv\");return/*#__PURE__*/_jsx(\"div\",{children:message.chart&&Object.keys(message.chart).length>0?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"button\",{onClick:downloadChartAsPDF,className:\"download-button\",children:/*#__PURE__*/_jsx(DownloadSharpIcon,{})}),/*#__PURE__*/_jsx(\"div\",{id:\"chart-container\",ref:chartRef,style:{position:'fixed',top:'-10000px',// Off-screen but within renderable area\nleft:'-10000px',width:'600px',height:'400px',pointerEvents:'none'},children:/*#__PURE__*/_jsx(Chart,{type:message.chart.type,data:message.chart.data,options:message.chart.options})})]}):/*#__PURE__*/_jsx(CSVLink,{data:csvData,filename:fileName,className:\"download-csv-link\",children:/*#__PURE__*/_jsx(DownloadSharpIcon,{})})});};export default ExportData;","map":{"version":3,"names":["React","useRef","CSVLink","html2canvas","DownloadSharpIcon","Chart","jsPDF","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ExportData","_ref","message","user_query","chartRef","convertMessageToCSVData","csvData","push","concat","table","headers","rows","text","downloadChartAsPDF","current","canvas","scale","useCORS","backgroundColor","imgData","toDataURL","pdf","orientation","unit","format","width","height","addImage","save","Date","toISOString","error","console","fileName","children","chart","Object","keys","length","onClick","className","id","ref","style","position","top","left","pointerEvents","type","data","options","filename"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/src/export/Export_data.js"],"sourcesContent":["import React, { useRef } from 'react';\r\nimport { CSVLink } from 'react-csv';\r\nimport html2canvas from 'html2canvas';\r\nimport DownloadSharpIcon from '@mui/icons-material/DownloadSharp';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport jsPDF from 'jspdf';\r\n\r\nconst ExportData = ({ message, user_query }) => {\r\n    const chartRef = useRef(null);\r\n    const convertMessageToCSVData = (message, user_query) => {\r\n        const csvData = [];\r\n\r\n        // Add user_query at the top of the CSV data\r\n        if (user_query) {\r\n            csvData.push([`User Query: ${user_query}`]);\r\n            csvData.push([]); // Add an empty row for separation\r\n        }\r\n\r\n        // Convert message data to CSV format\r\n        if (message.table && message.table.headers && message.table.rows) {\r\n            csvData.push(message.table.headers);\r\n            csvData.push(...message.table.rows);\r\n        } else if (message.text) {\r\n            csvData.push([message.text]);\r\n        }\r\n\r\n        return csvData;\r\n    };\r\n\r\n    const downloadChartAsPDF = async () => {\r\n        if (chartRef.current) {\r\n            try {\r\n                const canvas = await html2canvas(chartRef.current, {\r\n                    scale: 2, // Increase resolution\r\n                    useCORS: true, // Handle cross-origin images\r\n                    backgroundColor: null, // Transparent background\r\n                });\r\n\r\n                const imgData = canvas.toDataURL('image/png');\r\n                const pdf = new jsPDF({\r\n                    orientation: 'landscape',\r\n                    unit: 'px',\r\n                    format: [canvas.width, canvas.height], // Match PDF size to canvas size\r\n                });\r\n\r\n                // Add user_query at the top of the PDF\r\n                if (user_query) {\r\n                    pdf.text(`User Query: ${user_query}`, 10, 10);\r\n                }\r\n\r\n                pdf.addImage(imgData, 'PNG', 0, 20, canvas.width, canvas.height); // Adjust Y position for chart\r\n                pdf.save(`chart-${new Date().toISOString()}.pdf`);\r\n            } catch (error) {\r\n                console.error(\"Failed to download chart as PDF\", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const csvData = convertMessageToCSVData(message, user_query);\r\n    const fileName = `chatbot-response-${new Date().toISOString()}.csv`;\r\n\r\n    return (\r\n        <div>\r\n            {message.chart && Object.keys(message.chart).length > 0 ? (\r\n                <>\r\n                    <button onClick={downloadChartAsPDF} className=\"download-button\">\r\n                        <DownloadSharpIcon />\r\n                    </button>\r\n                    {/* Off-screen chart container, but within the viewport */}\r\n                    <div\r\n                        id=\"chart-container\"\r\n                        ref={chartRef}\r\n                        style={{\r\n                            position: 'fixed',\r\n                            top: '-10000px', // Off-screen but within renderable area\r\n                            left: '-10000px', \r\n                            width: '600px',\r\n                            height: '400px',\r\n                            pointerEvents: 'none',\r\n                        }}\r\n                    >\r\n                        <Chart type={message.chart.type} data={message.chart.data} options={message.chart.options} />\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <CSVLink data={csvData} filename={fileName} className=\"download-csv-link\">\r\n                    <DownloadSharpIcon />\r\n                </CSVLink>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExportData;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}