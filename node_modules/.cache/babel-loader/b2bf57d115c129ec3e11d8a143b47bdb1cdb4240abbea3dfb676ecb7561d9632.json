{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { exportAs } from '../../../utils/exportAs';\nimport { buildCSV } from './serializers/csvSerializer';\nimport { getColumnsToExport, defaultGetRowsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridCsvExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridCsvExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp === null || ignoreValueFormatterProp === void 0 ? void 0 : ignoreValueFormatterProp.csvExport : ignoreValueFormatterProp) || false;\n  const getDataAsCsv = React.useCallback(function () {\n    var _options$getRowsToExp, _options$shouldAppend, _options$includeHeade, _options$includeColum, _options$escapeFormul;\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    logger.debug(\"Get data as CSV\");\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) !== null && _options$getRowsToExp !== void 0 ? _options$getRowsToExp : defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      csvOptions: {\n        delimiter: options.delimiter || ',',\n        shouldAppendQuotes: (_options$shouldAppend = options.shouldAppendQuotes) !== null && _options$shouldAppend !== void 0 ? _options$shouldAppend : true,\n        includeHeaders: (_options$includeHeade = options.includeHeaders) !== null && _options$includeHeade !== void 0 ? _options$includeHeade : true,\n        includeColumnGroupsHeaders: (_options$includeColum = options.includeColumnGroupsHeaders) !== null && _options$includeColum !== void 0 ? _options$includeColum : true,\n        escapeFormulas: (_options$escapeFormul = options.escapeFormulas) !== null && _options$escapeFormul !== void 0 ? _options$escapeFormul : true\n      },\n      ignoreValueFormatter,\n      apiRef\n    });\n  }, [logger, apiRef, ignoreValueFormatter]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(\"Export data as CSV\");\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options !== null && options !== void 0 && options.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options === null || options === void 0 ? void 0 : options.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$csvOptions;\n    if ((_options$csvOptions = options.csvOptions) !== null && _options$csvOptions !== void 0 && _options$csvOptions.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"names":["React","useGridApiMethod","useGridLogger","exportAs","buildCSV","getColumnsToExport","defaultGetRowsToExport","useGridRegisterPipeProcessor","GridCsvExportMenuItem","jsx","_jsx","useGridCsvExport","apiRef","props","logger","ignoreValueFormatterProp","ignoreValueFormatterDuringExport","ignoreValueFormatter","csvExport","getDataAsCsv","useCallback","_options$getRowsToExp","_options$shouldAppend","_options$includeHeade","_options$includeColum","_options$escapeFormul","options","arguments","length","undefined","debug","exportedColumns","getRowsToExport","exportedRowIds","columns","rowIds","csvOptions","delimiter","shouldAppendQuotes","includeHeaders","includeColumnGroupsHeaders","escapeFormulas","exportDataAsCsv","csv","blob","Blob","utf8WithBom","Uint8Array","type","fileName","csvExportApi","addExportMenuButtons","initialValue","_options$csvOptions","disableToolbarButton","component","componentName"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { exportAs } from '../../../utils/exportAs';\nimport { buildCSV } from './serializers/csvSerializer';\nimport { getColumnsToExport, defaultGetRowsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridCsvExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridCsvExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.csvExport : ignoreValueFormatterProp) || false;\n  const getDataAsCsv = React.useCallback((options = {}) => {\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = options.getRowsToExport ?? defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      csvOptions: {\n        delimiter: options.delimiter || ',',\n        shouldAppendQuotes: options.shouldAppendQuotes ?? true,\n        includeHeaders: options.includeHeaders ?? true,\n        includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,\n        escapeFormulas: options.escapeFormulas ?? true\n      },\n      ignoreValueFormatter,\n      apiRef\n    });\n  }, [logger, apiRef, ignoreValueFormatter]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options?.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options?.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.csvOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}