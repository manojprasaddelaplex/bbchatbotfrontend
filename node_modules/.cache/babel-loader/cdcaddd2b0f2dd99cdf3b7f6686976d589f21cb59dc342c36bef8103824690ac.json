{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridDensitySelector } from './densitySelector';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nexport const densityStateInitializer = (state, props) => {\n  var _ref, _props$initialState$d, _props$initialState;\n  return _extends({}, state, {\n    density: (_ref = (_props$initialState$d = (_props$initialState = props.initialState) === null || _props$initialState === void 0 ? void 0 : _props$initialState.density) !== null && _props$initialState$d !== void 0 ? _props$initialState$d : props.density) !== null && _ref !== void 0 ? _ref : 'standard'\n  });\n};\nexport const useGridDensity = (apiRef, props) => {\n  var _props$initialState3;\n  const logger = useGridLogger(apiRef, 'useDensity');\n  apiRef.current.registerControlState({\n    stateId: 'density',\n    propModel: props.density,\n    propOnChange: props.onDensityChange,\n    stateSelector: gridDensitySelector,\n    changeEvent: 'densityChange'\n  });\n  const setDensity = useEventCallback(newDensity => {\n    const currentDensity = gridDensitySelector(apiRef.current.state);\n    if (currentDensity === newDensity) {\n      return;\n    }\n    logger.debug(\"Set grid density to \".concat(newDensity));\n    apiRef.current.setState(state => _extends({}, state, {\n      density: newDensity\n    }));\n  });\n  const densityApi = {\n    setDensity\n  };\n  useGridApiMethod(apiRef, densityApi, 'public');\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2;\n    const exportedDensity = gridDensitySelector(apiRef.current.state);\n    const shouldExportRowCount =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `density` is controlled\n    props.density != null ||\n    // Always export if the `density` has been initialized\n    ((_props$initialState2 = props.initialState) === null || _props$initialState2 === void 0 ? void 0 : _props$initialState2.density) != null;\n    if (!shouldExportRowCount) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      density: exportedDensity\n    });\n  }, [apiRef, props.density, (_props$initialState3 = props.initialState) === null || _props$initialState3 === void 0 ? void 0 : _props$initialState3.density]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    const restoredDensity = (_context$stateToResto = context.stateToRestore) !== null && _context$stateToResto !== void 0 && _context$stateToResto.density ? context.stateToRestore.density : gridDensitySelector(apiRef.current.state);\n    apiRef.current.setState(state => _extends({}, state, {\n      density: restoredDensity\n    }));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  React.useEffect(() => {\n    if (props.density) {\n      apiRef.current.setDensity(props.density);\n    }\n  }, [apiRef, props.density]);\n};","map":{"version":3,"names":["_extends","React","useEventCallback","useGridLogger","useGridApiMethod","gridDensitySelector","useGridRegisterPipeProcessor","densityStateInitializer","state","props","_ref","_props$initialState$d","_props$initialState","density","initialState","useGridDensity","apiRef","_props$initialState3","logger","current","registerControlState","stateId","propModel","propOnChange","onDensityChange","stateSelector","changeEvent","setDensity","newDensity","currentDensity","debug","concat","setState","densityApi","stateExportPreProcessing","useCallback","prevState","context","_props$initialState2","exportedDensity","shouldExportRowCount","exportOnlyDirtyModels","stateRestorePreProcessing","params","_context$stateToResto","restoredDensity","stateToRestore","useEffect"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/node_modules/@mui/x-data-grid/hooks/features/density/useGridDensity.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridDensitySelector } from './densitySelector';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nexport const densityStateInitializer = (state, props) => _extends({}, state, {\n  density: props.initialState?.density ?? props.density ?? 'standard'\n});\nexport const useGridDensity = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useDensity');\n  apiRef.current.registerControlState({\n    stateId: 'density',\n    propModel: props.density,\n    propOnChange: props.onDensityChange,\n    stateSelector: gridDensitySelector,\n    changeEvent: 'densityChange'\n  });\n  const setDensity = useEventCallback(newDensity => {\n    const currentDensity = gridDensitySelector(apiRef.current.state);\n    if (currentDensity === newDensity) {\n      return;\n    }\n    logger.debug(`Set grid density to ${newDensity}`);\n    apiRef.current.setState(state => _extends({}, state, {\n      density: newDensity\n    }));\n  });\n  const densityApi = {\n    setDensity\n  };\n  useGridApiMethod(apiRef, densityApi, 'public');\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const exportedDensity = gridDensitySelector(apiRef.current.state);\n    const shouldExportRowCount =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `density` is controlled\n    props.density != null ||\n    // Always export if the `density` has been initialized\n    props.initialState?.density != null;\n    if (!shouldExportRowCount) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      density: exportedDensity\n    });\n  }, [apiRef, props.density, props.initialState?.density]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const restoredDensity = context.stateToRestore?.density ? context.stateToRestore.density : gridDensitySelector(apiRef.current.state);\n    apiRef.current.setState(state => _extends({}, state, {\n      density: restoredDensity\n    }));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  React.useEffect(() => {\n    if (props.density) {\n      apiRef.current.setDensity(props.density);\n    }\n  }, [apiRef, props.density]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}