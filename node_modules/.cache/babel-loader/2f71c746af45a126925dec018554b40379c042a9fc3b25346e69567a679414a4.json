{"ast":null,"code":"import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nconst gridRowsStateSelector = state => state.rows;\nexport const gridRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalRowCount);\nexport const gridRowsLoadingSelector = createSelector(gridRowsStateSelector, rows => rows.loading);\nexport const gridTopLevelRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalTopLevelRowCount);\n\n// TODO rows v6: Rename\nexport const gridRowsLookupSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIdToModelLookup);\nexport const gridRowsDataRowIdToIdLookupSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIdToIdLookup);\nexport const gridRowTreeSelector = createSelector(gridRowsStateSelector, rows => rows.tree);\nexport const gridRowGroupsToFetchSelector = createSelector(gridRowsStateSelector, rows => rows.groupsToFetch);\nexport const gridRowGroupingNameSelector = createSelector(gridRowsStateSelector, rows => rows.groupingName);\nexport const gridRowTreeDepthsSelector = createSelector(gridRowsStateSelector, rows => rows.treeDepths);\nexport const gridRowMaximumTreeDepthSelector = createSelectorMemoized(gridRowsStateSelector, rows => {\n  const entries = Object.entries(rows.treeDepths);\n  if (entries.length === 0) {\n    return 1;\n  }\n  return entries.filter(_ref => {\n    let [, nodeCount] = _ref;\n    return nodeCount > 0;\n  }).map(_ref2 => {\n    let [depth] = _ref2;\n    return Number(depth);\n  }).sort((a, b) => b - a)[0] + 1;\n});\nexport const gridDataRowIdsSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIds);\n\n/**\n * @ignore - do not document.\n */\nexport const gridAdditionalRowGroupsSelector = createSelector(gridRowsStateSelector, rows => rows === null || rows === void 0 ? void 0 : rows.additionalRowGroups);\n\n/**\n * @ignore - do not document.\n */\nexport const gridPinnedRowsSelector = createSelectorMemoized(gridAdditionalRowGroupsSelector, additionalRowGroups => {\n  var _rawPinnedRows$bottom, _rawPinnedRows$bottom2, _rawPinnedRows$top$ma, _rawPinnedRows$top;\n  const rawPinnedRows = additionalRowGroups === null || additionalRowGroups === void 0 ? void 0 : additionalRowGroups.pinnedRows;\n  return {\n    bottom: (_rawPinnedRows$bottom = rawPinnedRows === null || rawPinnedRows === void 0 || (_rawPinnedRows$bottom2 = rawPinnedRows.bottom) === null || _rawPinnedRows$bottom2 === void 0 ? void 0 : _rawPinnedRows$bottom2.map(rowEntry => {\n      var _rowEntry$model;\n      return {\n        id: rowEntry.id,\n        model: (_rowEntry$model = rowEntry.model) !== null && _rowEntry$model !== void 0 ? _rowEntry$model : {}\n      };\n    })) !== null && _rawPinnedRows$bottom !== void 0 ? _rawPinnedRows$bottom : [],\n    top: (_rawPinnedRows$top$ma = rawPinnedRows === null || rawPinnedRows === void 0 || (_rawPinnedRows$top = rawPinnedRows.top) === null || _rawPinnedRows$top === void 0 ? void 0 : _rawPinnedRows$top.map(rowEntry => {\n      var _rowEntry$model2;\n      return {\n        id: rowEntry.id,\n        model: (_rowEntry$model2 = rowEntry.model) !== null && _rowEntry$model2 !== void 0 ? _rowEntry$model2 : {}\n      };\n    })) !== null && _rawPinnedRows$top$ma !== void 0 ? _rawPinnedRows$top$ma : []\n  };\n});\n\n/**\n * @ignore - do not document.\n */\nexport const gridPinnedRowsCountSelector = createSelector(gridPinnedRowsSelector, pinnedRows => {\n  var _pinnedRows$top, _pinnedRows$bottom;\n  return ((pinnedRows === null || pinnedRows === void 0 || (_pinnedRows$top = pinnedRows.top) === null || _pinnedRows$top === void 0 ? void 0 : _pinnedRows$top.length) || 0) + ((pinnedRows === null || pinnedRows === void 0 || (_pinnedRows$bottom = pinnedRows.bottom) === null || _pinnedRows$bottom === void 0 ? void 0 : _pinnedRows$bottom.length) || 0);\n});","map":{"version":3,"names":["createSelector","createSelectorMemoized","gridRowsStateSelector","state","rows","gridRowCountSelector","totalRowCount","gridRowsLoadingSelector","loading","gridTopLevelRowCountSelector","totalTopLevelRowCount","gridRowsLookupSelector","dataRowIdToModelLookup","gridRowsDataRowIdToIdLookupSelector","dataRowIdToIdLookup","gridRowTreeSelector","tree","gridRowGroupsToFetchSelector","groupsToFetch","gridRowGroupingNameSelector","groupingName","gridRowTreeDepthsSelector","treeDepths","gridRowMaximumTreeDepthSelector","entries","Object","length","filter","_ref","nodeCount","map","_ref2","depth","Number","sort","a","b","gridDataRowIdsSelector","dataRowIds","gridAdditionalRowGroupsSelector","additionalRowGroups","gridPinnedRowsSelector","_rawPinnedRows$bottom","_rawPinnedRows$bottom2","_rawPinnedRows$top$ma","_rawPinnedRows$top","rawPinnedRows","pinnedRows","bottom","rowEntry","_rowEntry$model","id","model","top","_rowEntry$model2","gridPinnedRowsCountSelector","_pinnedRows$top","_pinnedRows$bottom"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js"],"sourcesContent":["import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nconst gridRowsStateSelector = state => state.rows;\nexport const gridRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalRowCount);\nexport const gridRowsLoadingSelector = createSelector(gridRowsStateSelector, rows => rows.loading);\nexport const gridTopLevelRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalTopLevelRowCount);\n\n// TODO rows v6: Rename\nexport const gridRowsLookupSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIdToModelLookup);\nexport const gridRowsDataRowIdToIdLookupSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIdToIdLookup);\nexport const gridRowTreeSelector = createSelector(gridRowsStateSelector, rows => rows.tree);\nexport const gridRowGroupsToFetchSelector = createSelector(gridRowsStateSelector, rows => rows.groupsToFetch);\nexport const gridRowGroupingNameSelector = createSelector(gridRowsStateSelector, rows => rows.groupingName);\nexport const gridRowTreeDepthsSelector = createSelector(gridRowsStateSelector, rows => rows.treeDepths);\nexport const gridRowMaximumTreeDepthSelector = createSelectorMemoized(gridRowsStateSelector, rows => {\n  const entries = Object.entries(rows.treeDepths);\n  if (entries.length === 0) {\n    return 1;\n  }\n  return entries.filter(([, nodeCount]) => nodeCount > 0).map(([depth]) => Number(depth)).sort((a, b) => b - a)[0] + 1;\n});\nexport const gridDataRowIdsSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIds);\n\n/**\n * @ignore - do not document.\n */\nexport const gridAdditionalRowGroupsSelector = createSelector(gridRowsStateSelector, rows => rows?.additionalRowGroups);\n\n/**\n * @ignore - do not document.\n */\nexport const gridPinnedRowsSelector = createSelectorMemoized(gridAdditionalRowGroupsSelector, additionalRowGroups => {\n  const rawPinnedRows = additionalRowGroups?.pinnedRows;\n  return {\n    bottom: rawPinnedRows?.bottom?.map(rowEntry => ({\n      id: rowEntry.id,\n      model: rowEntry.model ?? {}\n    })) ?? [],\n    top: rawPinnedRows?.top?.map(rowEntry => ({\n      id: rowEntry.id,\n      model: rowEntry.model ?? {}\n    })) ?? []\n  };\n});\n\n/**\n * @ignore - do not document.\n */\nexport const gridPinnedRowsCountSelector = createSelector(gridPinnedRowsSelector, pinnedRows => {\n  return (pinnedRows?.top?.length || 0) + (pinnedRows?.bottom?.length || 0);\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}