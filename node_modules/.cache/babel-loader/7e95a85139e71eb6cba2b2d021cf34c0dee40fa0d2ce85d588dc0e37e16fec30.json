{"ast":null,"code":"import * as React from 'react';\nimport { selectedIdsLookupSelector } from '../rowSelection';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../columnGrouping/gridColumnGroupsSelector';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nexport const useGridRowAriaAttributes = () => {\n  const apiRef = useGridPrivateApiContext();\n  const selectedIdsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);\n  return React.useCallback((rowNode, index) => {\n    const ariaAttributes = {};\n    const ariaRowIndex = index + headerGroupingMaxDepth + 2; // 1 for the header row and 1 as it's 1-based\n    ariaAttributes['aria-rowindex'] = ariaRowIndex;\n    if (apiRef.current.isRowSelectable(rowNode.id)) {\n      ariaAttributes['aria-selected'] = selectedIdsLookup[rowNode.id] !== undefined;\n    }\n    return ariaAttributes;\n  }, [apiRef, selectedIdsLookup, headerGroupingMaxDepth]);\n};","map":{"version":3,"names":["React","selectedIdsLookupSelector","useGridSelector","gridColumnGroupsHeaderMaxDepthSelector","useGridPrivateApiContext","useGridRowAriaAttributes","apiRef","selectedIdsLookup","headerGroupingMaxDepth","useCallback","rowNode","index","ariaAttributes","ariaRowIndex","current","isRowSelectable","id","undefined"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowAriaAttributes.js"],"sourcesContent":["import * as React from 'react';\nimport { selectedIdsLookupSelector } from '../rowSelection';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../columnGrouping/gridColumnGroupsSelector';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nexport const useGridRowAriaAttributes = () => {\n  const apiRef = useGridPrivateApiContext();\n  const selectedIdsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);\n  return React.useCallback((rowNode, index) => {\n    const ariaAttributes = {};\n    const ariaRowIndex = index + headerGroupingMaxDepth + 2; // 1 for the header row and 1 as it's 1-based\n    ariaAttributes['aria-rowindex'] = ariaRowIndex;\n    if (apiRef.current.isRowSelectable(rowNode.id)) {\n      ariaAttributes['aria-selected'] = selectedIdsLookup[rowNode.id] !== undefined;\n    }\n    return ariaAttributes;\n  }, [apiRef, selectedIdsLookup, headerGroupingMaxDepth]);\n};"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,yBAAyB,QAAQ,iBAAiB;AAC3D,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,sCAAsC,QAAQ,4CAA4C;AACnG,SAASC,wBAAwB,QAAQ,sCAAsC;AAC/E,OAAO,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;EAC5C,MAAMC,MAAM,GAAGF,wBAAwB,CAAC,CAAC;EACzC,MAAMG,iBAAiB,GAAGL,eAAe,CAACI,MAAM,EAAEL,yBAAyB,CAAC;EAC5E,MAAMO,sBAAsB,GAAGN,eAAe,CAACI,MAAM,EAAEH,sCAAsC,CAAC;EAC9F,OAAOH,KAAK,CAACS,WAAW,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;IAC3C,MAAMC,cAAc,GAAG,CAAC,CAAC;IACzB,MAAMC,YAAY,GAAGF,KAAK,GAAGH,sBAAsB,GAAG,CAAC,CAAC,CAAC;IACzDI,cAAc,CAAC,eAAe,CAAC,GAAGC,YAAY;IAC9C,IAAIP,MAAM,CAACQ,OAAO,CAACC,eAAe,CAACL,OAAO,CAACM,EAAE,CAAC,EAAE;MAC9CJ,cAAc,CAAC,eAAe,CAAC,GAAGL,iBAAiB,CAACG,OAAO,CAACM,EAAE,CAAC,KAAKC,SAAS;IAC/E;IACA,OAAOL,cAAc;EACvB,CAAC,EAAE,CAACN,MAAM,EAAEC,iBAAiB,EAAEC,sBAAsB,CAAC,CAAC;AACzD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}