{"ast":null,"code":"import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { EMPTY_PINNED_COLUMN_FIELDS } from './gridColumnsInterfaces';\nimport { gridThemeSelector } from '../../core/gridCoreSelector';\n\n/**\n * Get the columns state\n * @category Columns\n */\nexport const gridColumnsStateSelector = state => state.columns;\n\n/**\n * Get an array of column fields in the order rendered on screen.\n * @category Columns\n */\nexport const gridColumnFieldsSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.orderedFields);\n\n/**\n * Get the columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\nexport const gridColumnLookupSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.lookup);\n\n/**\n * Get an array of column definitions in the order rendered on screen..\n * @category Columns\n */\nexport const gridColumnDefinitionsSelector = createSelectorMemoized(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup) => allFields.map(field => lookup[field]));\n\n/**\n * Get the column visibility model, containing the visibility status of each column.\n * If a column is not registered in the model, it is visible.\n * @category Visible Columns\n */\nexport const gridColumnVisibilityModelSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.columnVisibilityModel);\n\n/**\n * Get the visible columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Visible Columns\n */\nexport const gridVisibleColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns, columnVisibilityModel) => columns.filter(column => columnVisibilityModel[column.field] !== false));\n\n/**\n * Get the field of each visible column.\n * @category Visible Columns\n */\nexport const gridVisibleColumnFieldsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, visibleColumns => visibleColumns.map(column => column.field));\n\n/**\n * Get the visible pinned columns model.\n * @category Visible Columns\n */\nexport const gridPinnedColumnsSelector = state => state.pinnedColumns;\n\n/**\n * Get the visible pinned columns.\n * @category Visible Columns\n */\nexport const gridVisiblePinnedColumnDefinitionsSelector = createSelectorMemoized(gridColumnsStateSelector, gridPinnedColumnsSelector, gridVisibleColumnFieldsSelector, gridThemeSelector, (columnsState, model, visibleColumnFields, theme) => {\n  const visiblePinnedFields = filterVisibleColumns(model, visibleColumnFields, theme.direction === 'rtl');\n  const visiblePinnedColumns = {\n    left: visiblePinnedFields.left.map(field => columnsState.lookup[field]),\n    right: visiblePinnedFields.right.map(field => columnsState.lookup[field])\n  };\n  return visiblePinnedColumns;\n});\nfunction filterVisibleColumns(pinnedColumns, columns, invert) {\n  var _pinnedColumns$left, _pinnedColumns$right;\n  if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n    return EMPTY_PINNED_COLUMN_FIELDS;\n  }\n  if (((_pinnedColumns$left = pinnedColumns.left) === null || _pinnedColumns$left === void 0 ? void 0 : _pinnedColumns$left.length) === 0 && ((_pinnedColumns$right = pinnedColumns.right) === null || _pinnedColumns$right === void 0 ? void 0 : _pinnedColumns$right.length) === 0) {\n    return EMPTY_PINNED_COLUMN_FIELDS;\n  }\n  const filter = (newPinnedColumns, remainingColumns) => {\n    if (!Array.isArray(newPinnedColumns)) {\n      return [];\n    }\n    return newPinnedColumns.filter(field => remainingColumns.includes(field));\n  };\n  const leftPinnedColumns = filter(pinnedColumns.left, columns);\n  const columnsWithoutLeftPinnedColumns = columns.filter(\n  // Filter out from the remaining columns those columns already pinned to the left\n  field => !leftPinnedColumns.includes(field));\n  const rightPinnedColumns = filter(pinnedColumns.right, columnsWithoutLeftPinnedColumns);\n  if (invert) {\n    return {\n      left: rightPinnedColumns,\n      right: leftPinnedColumns\n    };\n  }\n  return {\n    left: leftPinnedColumns,\n    right: rightPinnedColumns\n  };\n}\n\n/**\n * Get the left position in pixel of each visible columns relative to the left of the first column.\n * @category Visible Columns\n */\nexport const gridColumnPositionsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, visibleColumns => {\n  const positions = [];\n  let currentPosition = 0;\n  for (let i = 0; i < visibleColumns.length; i += 1) {\n    positions.push(currentPosition);\n    currentPosition += visibleColumns[i].computedWidth;\n  }\n  return positions;\n});\n\n/**\n * Get the summed width of all the visible columns.\n * @category Visible Columns\n */\nexport const gridColumnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;\n});\n\n/**\n * Get the filterable columns as an array.\n * @category Columns\n */\nexport const gridFilterableColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.filter(col => col.filterable));\n\n/**\n * Get the filterable columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\nexport const gridFilterableColumnLookupSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.reduce((acc, col) => {\n  if (col.filterable) {\n    acc[col.field] = col;\n  }\n  return acc;\n}, {}));\n\n/**\n * Checks if some column has a colSpan field.\n * @category Columns\n * @ignore - Do not document\n */\nexport const gridHasColSpanSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.some(column => column.colSpan !== undefined));","map":{"version":3,"names":["createSelector","createSelectorMemoized","EMPTY_PINNED_COLUMN_FIELDS","gridThemeSelector","gridColumnsStateSelector","state","columns","gridColumnFieldsSelector","columnsState","orderedFields","gridColumnLookupSelector","lookup","gridColumnDefinitionsSelector","allFields","map","field","gridColumnVisibilityModelSelector","columnVisibilityModel","gridVisibleColumnDefinitionsSelector","filter","column","gridVisibleColumnFieldsSelector","visibleColumns","gridPinnedColumnsSelector","pinnedColumns","gridVisiblePinnedColumnDefinitionsSelector","model","visibleColumnFields","theme","visiblePinnedFields","filterVisibleColumns","direction","visiblePinnedColumns","left","right","invert","_pinnedColumns$left","_pinnedColumns$right","Array","isArray","length","newPinnedColumns","remainingColumns","includes","leftPinnedColumns","columnsWithoutLeftPinnedColumns","rightPinnedColumns","gridColumnPositionsSelector","positions","currentPosition","i","push","computedWidth","gridColumnsTotalWidthSelector","colCount","gridFilterableColumnDefinitionsSelector","col","filterable","gridFilterableColumnLookupSelector","reduce","acc","gridHasColSpanSelector","some","colSpan","undefined"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js"],"sourcesContent":["import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { EMPTY_PINNED_COLUMN_FIELDS } from './gridColumnsInterfaces';\nimport { gridThemeSelector } from '../../core/gridCoreSelector';\n\n/**\n * Get the columns state\n * @category Columns\n */\nexport const gridColumnsStateSelector = state => state.columns;\n\n/**\n * Get an array of column fields in the order rendered on screen.\n * @category Columns\n */\nexport const gridColumnFieldsSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.orderedFields);\n\n/**\n * Get the columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\nexport const gridColumnLookupSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.lookup);\n\n/**\n * Get an array of column definitions in the order rendered on screen..\n * @category Columns\n */\nexport const gridColumnDefinitionsSelector = createSelectorMemoized(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup) => allFields.map(field => lookup[field]));\n\n/**\n * Get the column visibility model, containing the visibility status of each column.\n * If a column is not registered in the model, it is visible.\n * @category Visible Columns\n */\nexport const gridColumnVisibilityModelSelector = createSelector(gridColumnsStateSelector, columnsState => columnsState.columnVisibilityModel);\n\n/**\n * Get the visible columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Visible Columns\n */\nexport const gridVisibleColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns, columnVisibilityModel) => columns.filter(column => columnVisibilityModel[column.field] !== false));\n\n/**\n * Get the field of each visible column.\n * @category Visible Columns\n */\nexport const gridVisibleColumnFieldsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, visibleColumns => visibleColumns.map(column => column.field));\n\n/**\n * Get the visible pinned columns model.\n * @category Visible Columns\n */\nexport const gridPinnedColumnsSelector = state => state.pinnedColumns;\n\n/**\n * Get the visible pinned columns.\n * @category Visible Columns\n */\nexport const gridVisiblePinnedColumnDefinitionsSelector = createSelectorMemoized(gridColumnsStateSelector, gridPinnedColumnsSelector, gridVisibleColumnFieldsSelector, gridThemeSelector, (columnsState, model, visibleColumnFields, theme) => {\n  const visiblePinnedFields = filterVisibleColumns(model, visibleColumnFields, theme.direction === 'rtl');\n  const visiblePinnedColumns = {\n    left: visiblePinnedFields.left.map(field => columnsState.lookup[field]),\n    right: visiblePinnedFields.right.map(field => columnsState.lookup[field])\n  };\n  return visiblePinnedColumns;\n});\nfunction filterVisibleColumns(pinnedColumns, columns, invert) {\n  if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n    return EMPTY_PINNED_COLUMN_FIELDS;\n  }\n  if (pinnedColumns.left?.length === 0 && pinnedColumns.right?.length === 0) {\n    return EMPTY_PINNED_COLUMN_FIELDS;\n  }\n  const filter = (newPinnedColumns, remainingColumns) => {\n    if (!Array.isArray(newPinnedColumns)) {\n      return [];\n    }\n    return newPinnedColumns.filter(field => remainingColumns.includes(field));\n  };\n  const leftPinnedColumns = filter(pinnedColumns.left, columns);\n  const columnsWithoutLeftPinnedColumns = columns.filter(\n  // Filter out from the remaining columns those columns already pinned to the left\n  field => !leftPinnedColumns.includes(field));\n  const rightPinnedColumns = filter(pinnedColumns.right, columnsWithoutLeftPinnedColumns);\n  if (invert) {\n    return {\n      left: rightPinnedColumns,\n      right: leftPinnedColumns\n    };\n  }\n  return {\n    left: leftPinnedColumns,\n    right: rightPinnedColumns\n  };\n}\n\n/**\n * Get the left position in pixel of each visible columns relative to the left of the first column.\n * @category Visible Columns\n */\nexport const gridColumnPositionsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, visibleColumns => {\n  const positions = [];\n  let currentPosition = 0;\n  for (let i = 0; i < visibleColumns.length; i += 1) {\n    positions.push(currentPosition);\n    currentPosition += visibleColumns[i].computedWidth;\n  }\n  return positions;\n});\n\n/**\n * Get the summed width of all the visible columns.\n * @category Visible Columns\n */\nexport const gridColumnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;\n});\n\n/**\n * Get the filterable columns as an array.\n * @category Columns\n */\nexport const gridFilterableColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.filter(col => col.filterable));\n\n/**\n * Get the filterable columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\nexport const gridFilterableColumnLookupSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.reduce((acc, col) => {\n  if (col.filterable) {\n    acc[col.field] = col;\n  }\n  return acc;\n}, {}));\n\n/**\n * Checks if some column has a colSpan field.\n * @category Columns\n * @ignore - Do not document\n */\nexport const gridHasColSpanSelector = createSelectorMemoized(gridColumnDefinitionsSelector, columns => columns.some(column => column.colSpan !== undefined));"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}