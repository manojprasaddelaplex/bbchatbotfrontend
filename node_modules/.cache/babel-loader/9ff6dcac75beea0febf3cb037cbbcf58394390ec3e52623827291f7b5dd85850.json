{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GridLogicOperator } from '../../../models';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { warnOnce } from '../../../internals/utils/warning';\nimport { getPublicApiRef } from '../../../utils/getPublicApiRef';\nimport { gridColumnFieldsSelector, gridColumnLookupSelector, gridVisibleColumnFieldsSelector } from '../columns';\nlet hasEval;\nfunction getHasEval() {\n  if (hasEval !== undefined) {\n    return hasEval;\n  }\n  try {\n    hasEval = new Function('return true')();\n  } catch (_) {\n    hasEval = false;\n  }\n  return hasEval;\n}\n/**\n * Adds default values to the optional fields of a filter items.\n * @param {GridFilterItem} item The raw filter item.\n * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.\n * @return {GridFilterItem} The clean filter item with an uniq ID and an always-defined operator.\n * TODO: Make the typing reflect the different between GridFilterInputItem and GridFilterItem.\n */\nexport const cleanFilterItem = (item, apiRef) => {\n  const cleanItem = _extends({}, item);\n  if (cleanItem.id == null) {\n    cleanItem.id = Math.round(Math.random() * 1e5);\n  }\n  if (cleanItem.operator == null) {\n    // Selects a default operator\n    // We don't use `apiRef.current.getColumn` because it is not ready during state initialization\n    const column = gridColumnLookupSelector(apiRef)[cleanItem.field];\n    cleanItem.operator = column && column.filterOperators[0].value;\n  }\n  return cleanItem;\n};\nexport const sanitizeFilterModel = (model, disableMultipleColumnsFiltering, apiRef) => {\n  const hasSeveralItems = model.items.length > 1;\n  let items;\n  if (hasSeveralItems && disableMultipleColumnsFiltering) {\n    if (process.env.NODE_ENV !== 'production') {\n      warnOnce(['MUI X: The `filterModel` can only contain a single item when the `disableMultipleColumnsFiltering` prop is set to `true`.', 'If you are using the community version of the `DataGrid`, this prop is always `true`.'], 'error');\n    }\n    items = [model.items[0]];\n  } else {\n    items = model.items;\n  }\n  const hasItemsWithoutIds = hasSeveralItems && items.some(item => item.id == null);\n  const hasItemWithoutOperator = items.some(item => item.operator == null);\n  if (process.env.NODE_ENV !== 'production') {\n    if (hasItemsWithoutIds) {\n      warnOnce('MUI X: The `id` field is required on `filterModel.items` when you use multiple filters.', 'error');\n    }\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (hasItemWithoutOperator) {\n      warnOnce('MUI X: The `operator` field is required on `filterModel.items`, one or more of your filtering item has no `operator` provided.', 'error');\n    }\n  }\n  if (hasItemWithoutOperator || hasItemsWithoutIds) {\n    return _extends({}, model, {\n      items: items.map(item => cleanFilterItem(item, apiRef))\n    });\n  }\n  if (model.items !== items) {\n    return _extends({}, model, {\n      items\n    });\n  }\n  return model;\n};\nexport const mergeStateWithFilterModel = (filterModel, disableMultipleColumnsFiltering, apiRef) => filteringState => _extends({}, filteringState, {\n  filterModel: sanitizeFilterModel(filterModel, disableMultipleColumnsFiltering, apiRef)\n});\nexport const removeDiacritics = value => {\n  if (typeof value === 'string') {\n    return value.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n  }\n  return value;\n};\nconst getFilterCallbackFromItem = (filterItem, apiRef) => {\n  if (!filterItem.field || !filterItem.operator) {\n    return null;\n  }\n  const column = apiRef.current.getColumn(filterItem.field);\n  if (!column) {\n    return null;\n  }\n  let parsedValue;\n  if (column.valueParser) {\n    var _filterItem$value;\n    const parser = column.valueParser;\n    parsedValue = Array.isArray(filterItem.value) ? (_filterItem$value = filterItem.value) === null || _filterItem$value === void 0 ? void 0 : _filterItem$value.map(x => parser(x, undefined, column, apiRef)) : parser(filterItem.value, undefined, column, apiRef);\n  } else {\n    parsedValue = filterItem.value;\n  }\n  const {\n    ignoreDiacritics\n  } = apiRef.current.rootProps;\n  if (ignoreDiacritics) {\n    parsedValue = removeDiacritics(parsedValue);\n  }\n  const newFilterItem = _extends({}, filterItem, {\n    value: parsedValue\n  });\n  const filterOperators = column.filterOperators;\n  if (!(filterOperators !== null && filterOperators !== void 0 && filterOperators.length)) {\n    throw new Error(\"MUI X: No filter operators found for column '\".concat(column.field, \"'.\"));\n  }\n  const filterOperator = filterOperators.find(operator => operator.value === newFilterItem.operator);\n  if (!filterOperator) {\n    throw new Error(\"MUI X: No filter operator found for column '\".concat(column.field, \"' and operator value '\").concat(newFilterItem.operator, \"'.\"));\n  }\n  const publicApiRef = getPublicApiRef(apiRef);\n  const applyFilterOnRow = filterOperator.getApplyFilterFn(newFilterItem, column);\n  if (typeof applyFilterOnRow !== 'function') {\n    return null;\n  }\n  return {\n    item: newFilterItem,\n    fn: row => {\n      let value = apiRef.current.getRowValue(row, column);\n      if (ignoreDiacritics) {\n        value = removeDiacritics(value);\n      }\n      return applyFilterOnRow(value, row, column, publicApiRef);\n    }\n  };\n};\nlet filterItemsApplierId = 1;\n\n/**\n * Generates a method to easily check if a row is matching the current filter model.\n * @param {GridFilterModel} filterModel The model with which we want to filter the rows.\n * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.\n * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.\n */\nconst buildAggregatedFilterItemsApplier = (filterModel, apiRef, disableEval) => {\n  const {\n    items\n  } = filterModel;\n  const appliers = items.map(item => getFilterCallbackFromItem(item, apiRef)).filter(callback => !!callback);\n  if (appliers.length === 0) {\n    return null;\n  }\n  if (disableEval || !getHasEval()) {\n    // This is the original logic, which is used if `eval()` is not supported (aka prevented by CSP).\n    return (row, shouldApplyFilter) => {\n      const resultPerItemId = {};\n      for (let i = 0; i < appliers.length; i += 1) {\n        const applier = appliers[i];\n        if (!shouldApplyFilter || shouldApplyFilter(applier.item.field)) {\n          resultPerItemId[applier.item.id] = applier.fn(row);\n        }\n      }\n      return resultPerItemId;\n    };\n  }\n\n  // We generate a new function with `new Function()` to avoid expensive patterns for JS engines\n  // such as a dynamic object assignment, for example `{ [dynamicKey]: value }`.\n  const filterItemCore = new Function('appliers', 'row', 'shouldApplyFilter', \"\\\"use strict\\\";\\n\".concat(appliers.map((applier, i) => \"const shouldApply\".concat(i, \" = !shouldApplyFilter || shouldApplyFilter(\").concat(JSON.stringify(applier.item.field), \");\")).join('\\n'), \"\\n\\nconst result$$ = {\\n\").concat(appliers.map((applier, i) => \"  \".concat(JSON.stringify(String(applier.item.id)), \": !shouldApply\").concat(i, \" ? false : appliers[\").concat(i, \"].fn(row),\")).join('\\n'), \"\\n};\\n\\nreturn result$$;\").replaceAll('$$', String(filterItemsApplierId)));\n  filterItemsApplierId += 1;\n\n  // Assign to the arrow function a name to help debugging\n  const filterItem = (row, shouldApplyItem) => filterItemCore(appliers, row, shouldApplyItem);\n  return filterItem;\n};\nexport const shouldQuickFilterExcludeHiddenColumns = filterModel => {\n  var _filterModel$quickFil;\n  return (_filterModel$quickFil = filterModel.quickFilterExcludeHiddenColumns) !== null && _filterModel$quickFil !== void 0 ? _filterModel$quickFil : true;\n};\n\n/**\n * Generates a method to easily check if a row is matching the current quick filter.\n * @param {any[]} filterModel The model with which we want to filter the rows.\n * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.\n * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.\n */\nconst buildAggregatedQuickFilterApplier = (filterModel, apiRef) => {\n  var _filterModel$quickFil2, _filterModel$quickFil3;\n  const quickFilterValues = (_filterModel$quickFil2 = (_filterModel$quickFil3 = filterModel.quickFilterValues) === null || _filterModel$quickFil3 === void 0 ? void 0 : _filterModel$quickFil3.filter(Boolean)) !== null && _filterModel$quickFil2 !== void 0 ? _filterModel$quickFil2 : [];\n  if (quickFilterValues.length === 0) {\n    return null;\n  }\n  const columnFields = shouldQuickFilterExcludeHiddenColumns(filterModel) ? gridVisibleColumnFieldsSelector(apiRef) : gridColumnFieldsSelector(apiRef);\n  const appliersPerField = [];\n  const {\n    ignoreDiacritics\n  } = apiRef.current.rootProps;\n  const publicApiRef = getPublicApiRef(apiRef);\n  columnFields.forEach(field => {\n    const column = apiRef.current.getColumn(field);\n    const getApplyQuickFilterFn = column === null || column === void 0 ? void 0 : column.getApplyQuickFilterFn;\n    if (getApplyQuickFilterFn) {\n      appliersPerField.push({\n        column,\n        appliers: quickFilterValues.map(quickFilterValue => {\n          const value = ignoreDiacritics ? removeDiacritics(quickFilterValue) : quickFilterValue;\n          return {\n            fn: getApplyQuickFilterFn(value, column, publicApiRef)\n          };\n        })\n      });\n    }\n  });\n  return function isRowMatchingQuickFilter(row, shouldApplyFilter) {\n    const result = {};\n\n    /* eslint-disable no-labels */\n    outer: for (let v = 0; v < quickFilterValues.length; v += 1) {\n      const filterValue = quickFilterValues[v];\n      for (let i = 0; i < appliersPerField.length; i += 1) {\n        const {\n          column,\n          appliers\n        } = appliersPerField[i];\n        const {\n          field\n        } = column;\n        if (shouldApplyFilter && !shouldApplyFilter(field)) {\n          continue;\n        }\n        const applier = appliers[v];\n        let value = apiRef.current.getRowValue(row, column);\n        if (applier.fn === null) {\n          continue;\n        }\n        if (ignoreDiacritics) {\n          value = removeDiacritics(value);\n        }\n        const isMatching = applier.fn(value, row, column, publicApiRef);\n        if (isMatching) {\n          result[filterValue] = true;\n          continue outer;\n        }\n      }\n      result[filterValue] = false;\n    }\n    return result;\n  };\n};\nexport const buildAggregatedFilterApplier = (filterModel, apiRef, disableEval) => {\n  const isRowMatchingFilterItems = buildAggregatedFilterItemsApplier(filterModel, apiRef, disableEval);\n  const isRowMatchingQuickFilter = buildAggregatedQuickFilterApplier(filterModel, apiRef);\n  return function isRowMatchingFilters(row, shouldApplyFilter, result) {\n    var _isRowMatchingFilterI, _isRowMatchingQuickFi;\n    result.passingFilterItems = (_isRowMatchingFilterI = isRowMatchingFilterItems === null || isRowMatchingFilterItems === void 0 ? void 0 : isRowMatchingFilterItems(row, shouldApplyFilter)) !== null && _isRowMatchingFilterI !== void 0 ? _isRowMatchingFilterI : null;\n    result.passingQuickFilterValues = (_isRowMatchingQuickFi = isRowMatchingQuickFilter === null || isRowMatchingQuickFilter === void 0 ? void 0 : isRowMatchingQuickFilter(row, shouldApplyFilter)) !== null && _isRowMatchingQuickFi !== void 0 ? _isRowMatchingQuickFi : null;\n  };\n};\nconst isNotNull = result => result != null;\nconst filterModelItems = (cache, apiRef, items) => {\n  if (!cache.cleanedFilterItems) {\n    cache.cleanedFilterItems = items.filter(item => getFilterCallbackFromItem(item, apiRef) !== null);\n  }\n  return cache.cleanedFilterItems;\n};\nexport const passFilterLogic = (allFilterItemResults, allQuickFilterResults, filterModel, apiRef, cache) => {\n  const cleanedFilterItems = filterModelItems(cache, apiRef, filterModel.items);\n  const cleanedFilterItemResults = allFilterItemResults.filter(isNotNull);\n  const cleanedQuickFilterResults = allQuickFilterResults.filter(isNotNull);\n\n  // get result for filter items model\n  if (cleanedFilterItemResults.length > 0) {\n    var _filterModel$logicOpe;\n    // Return true if the item pass with one of the rows\n    const filterItemPredicate = item => {\n      return cleanedFilterItemResults.some(filterItemResult => filterItemResult[item.id]);\n    };\n    const logicOperator = (_filterModel$logicOpe = filterModel.logicOperator) !== null && _filterModel$logicOpe !== void 0 ? _filterModel$logicOpe : getDefaultGridFilterModel().logicOperator;\n    if (logicOperator === GridLogicOperator.And) {\n      const passesAllFilters = cleanedFilterItems.every(filterItemPredicate);\n      if (!passesAllFilters) {\n        return false;\n      }\n    } else {\n      const passesSomeFilters = cleanedFilterItems.some(filterItemPredicate);\n      if (!passesSomeFilters) {\n        return false;\n      }\n    }\n  }\n\n  // get result for quick filter model\n  if (cleanedQuickFilterResults.length > 0 && filterModel.quickFilterValues != null) {\n    var _filterModel$quickFil4;\n    // Return true if the item pass with one of the rows\n    const quickFilterValuePredicate = value => {\n      return cleanedQuickFilterResults.some(quickFilterValueResult => quickFilterValueResult[value]);\n    };\n    const quickFilterLogicOperator = (_filterModel$quickFil4 = filterModel.quickFilterLogicOperator) !== null && _filterModel$quickFil4 !== void 0 ? _filterModel$quickFil4 : getDefaultGridFilterModel().quickFilterLogicOperator;\n    if (quickFilterLogicOperator === GridLogicOperator.And) {\n      const passesAllQuickFilterValues = filterModel.quickFilterValues.every(quickFilterValuePredicate);\n      if (!passesAllQuickFilterValues) {\n        return false;\n      }\n    } else {\n      const passesSomeQuickFilterValues = filterModel.quickFilterValues.some(quickFilterValuePredicate);\n      if (!passesSomeQuickFilterValues) {\n        return false;\n      }\n    }\n  }\n  return true;\n};","map":{"version":3,"names":["_extends","GridLogicOperator","getDefaultGridFilterModel","warnOnce","getPublicApiRef","gridColumnFieldsSelector","gridColumnLookupSelector","gridVisibleColumnFieldsSelector","hasEval","getHasEval","undefined","Function","_","cleanFilterItem","item","apiRef","cleanItem","id","Math","round","random","operator","column","field","filterOperators","value","sanitizeFilterModel","model","disableMultipleColumnsFiltering","hasSeveralItems","items","length","process","env","NODE_ENV","hasItemsWithoutIds","some","hasItemWithoutOperator","map","mergeStateWithFilterModel","filterModel","filteringState","removeDiacritics","normalize","replace","getFilterCallbackFromItem","filterItem","current","getColumn","parsedValue","valueParser","_filterItem$value","parser","Array","isArray","x","ignoreDiacritics","rootProps","newFilterItem","Error","concat","filterOperator","find","publicApiRef","applyFilterOnRow","getApplyFilterFn","fn","row","getRowValue","filterItemsApplierId","buildAggregatedFilterItemsApplier","disableEval","appliers","filter","callback","shouldApplyFilter","resultPerItemId","i","applier","filterItemCore","JSON","stringify","join","String","replaceAll","shouldApplyItem","shouldQuickFilterExcludeHiddenColumns","_filterModel$quickFil","quickFilterExcludeHiddenColumns","buildAggregatedQuickFilterApplier","_filterModel$quickFil2","_filterModel$quickFil3","quickFilterValues","Boolean","columnFields","appliersPerField","forEach","getApplyQuickFilterFn","push","quickFilterValue","isRowMatchingQuickFilter","result","outer","v","filterValue","isMatching","buildAggregatedFilterApplier","isRowMatchingFilterItems","isRowMatchingFilters","_isRowMatchingFilterI","_isRowMatchingQuickFi","passingFilterItems","passingQuickFilterValues","isNotNull","filterModelItems","cache","cleanedFilterItems","passFilterLogic","allFilterItemResults","allQuickFilterResults","cleanedFilterItemResults","cleanedQuickFilterResults","_filterModel$logicOpe","filterItemPredicate","filterItemResult","logicOperator","And","passesAllFilters","every","passesSomeFilters","_filterModel$quickFil4","quickFilterValuePredicate","quickFilterValueResult","quickFilterLogicOperator","passesAllQuickFilterValues","passesSomeQuickFilterValues"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GridLogicOperator } from '../../../models';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { warnOnce } from '../../../internals/utils/warning';\nimport { getPublicApiRef } from '../../../utils/getPublicApiRef';\nimport { gridColumnFieldsSelector, gridColumnLookupSelector, gridVisibleColumnFieldsSelector } from '../columns';\nlet hasEval;\nfunction getHasEval() {\n  if (hasEval !== undefined) {\n    return hasEval;\n  }\n  try {\n    hasEval = new Function('return true')();\n  } catch (_) {\n    hasEval = false;\n  }\n  return hasEval;\n}\n/**\n * Adds default values to the optional fields of a filter items.\n * @param {GridFilterItem} item The raw filter item.\n * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.\n * @return {GridFilterItem} The clean filter item with an uniq ID and an always-defined operator.\n * TODO: Make the typing reflect the different between GridFilterInputItem and GridFilterItem.\n */\nexport const cleanFilterItem = (item, apiRef) => {\n  const cleanItem = _extends({}, item);\n  if (cleanItem.id == null) {\n    cleanItem.id = Math.round(Math.random() * 1e5);\n  }\n  if (cleanItem.operator == null) {\n    // Selects a default operator\n    // We don't use `apiRef.current.getColumn` because it is not ready during state initialization\n    const column = gridColumnLookupSelector(apiRef)[cleanItem.field];\n    cleanItem.operator = column && column.filterOperators[0].value;\n  }\n  return cleanItem;\n};\nexport const sanitizeFilterModel = (model, disableMultipleColumnsFiltering, apiRef) => {\n  const hasSeveralItems = model.items.length > 1;\n  let items;\n  if (hasSeveralItems && disableMultipleColumnsFiltering) {\n    if (process.env.NODE_ENV !== 'production') {\n      warnOnce(['MUI X: The `filterModel` can only contain a single item when the `disableMultipleColumnsFiltering` prop is set to `true`.', 'If you are using the community version of the `DataGrid`, this prop is always `true`.'], 'error');\n    }\n    items = [model.items[0]];\n  } else {\n    items = model.items;\n  }\n  const hasItemsWithoutIds = hasSeveralItems && items.some(item => item.id == null);\n  const hasItemWithoutOperator = items.some(item => item.operator == null);\n  if (process.env.NODE_ENV !== 'production') {\n    if (hasItemsWithoutIds) {\n      warnOnce('MUI X: The `id` field is required on `filterModel.items` when you use multiple filters.', 'error');\n    }\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (hasItemWithoutOperator) {\n      warnOnce('MUI X: The `operator` field is required on `filterModel.items`, one or more of your filtering item has no `operator` provided.', 'error');\n    }\n  }\n  if (hasItemWithoutOperator || hasItemsWithoutIds) {\n    return _extends({}, model, {\n      items: items.map(item => cleanFilterItem(item, apiRef))\n    });\n  }\n  if (model.items !== items) {\n    return _extends({}, model, {\n      items\n    });\n  }\n  return model;\n};\nexport const mergeStateWithFilterModel = (filterModel, disableMultipleColumnsFiltering, apiRef) => filteringState => _extends({}, filteringState, {\n  filterModel: sanitizeFilterModel(filterModel, disableMultipleColumnsFiltering, apiRef)\n});\nexport const removeDiacritics = value => {\n  if (typeof value === 'string') {\n    return value.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n  }\n  return value;\n};\nconst getFilterCallbackFromItem = (filterItem, apiRef) => {\n  if (!filterItem.field || !filterItem.operator) {\n    return null;\n  }\n  const column = apiRef.current.getColumn(filterItem.field);\n  if (!column) {\n    return null;\n  }\n  let parsedValue;\n  if (column.valueParser) {\n    const parser = column.valueParser;\n    parsedValue = Array.isArray(filterItem.value) ? filterItem.value?.map(x => parser(x, undefined, column, apiRef)) : parser(filterItem.value, undefined, column, apiRef);\n  } else {\n    parsedValue = filterItem.value;\n  }\n  const {\n    ignoreDiacritics\n  } = apiRef.current.rootProps;\n  if (ignoreDiacritics) {\n    parsedValue = removeDiacritics(parsedValue);\n  }\n  const newFilterItem = _extends({}, filterItem, {\n    value: parsedValue\n  });\n  const filterOperators = column.filterOperators;\n  if (!filterOperators?.length) {\n    throw new Error(`MUI X: No filter operators found for column '${column.field}'.`);\n  }\n  const filterOperator = filterOperators.find(operator => operator.value === newFilterItem.operator);\n  if (!filterOperator) {\n    throw new Error(`MUI X: No filter operator found for column '${column.field}' and operator value '${newFilterItem.operator}'.`);\n  }\n  const publicApiRef = getPublicApiRef(apiRef);\n  const applyFilterOnRow = filterOperator.getApplyFilterFn(newFilterItem, column);\n  if (typeof applyFilterOnRow !== 'function') {\n    return null;\n  }\n  return {\n    item: newFilterItem,\n    fn: row => {\n      let value = apiRef.current.getRowValue(row, column);\n      if (ignoreDiacritics) {\n        value = removeDiacritics(value);\n      }\n      return applyFilterOnRow(value, row, column, publicApiRef);\n    }\n  };\n};\nlet filterItemsApplierId = 1;\n\n/**\n * Generates a method to easily check if a row is matching the current filter model.\n * @param {GridFilterModel} filterModel The model with which we want to filter the rows.\n * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.\n * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.\n */\nconst buildAggregatedFilterItemsApplier = (filterModel, apiRef, disableEval) => {\n  const {\n    items\n  } = filterModel;\n  const appliers = items.map(item => getFilterCallbackFromItem(item, apiRef)).filter(callback => !!callback);\n  if (appliers.length === 0) {\n    return null;\n  }\n  if (disableEval || !getHasEval()) {\n    // This is the original logic, which is used if `eval()` is not supported (aka prevented by CSP).\n    return (row, shouldApplyFilter) => {\n      const resultPerItemId = {};\n      for (let i = 0; i < appliers.length; i += 1) {\n        const applier = appliers[i];\n        if (!shouldApplyFilter || shouldApplyFilter(applier.item.field)) {\n          resultPerItemId[applier.item.id] = applier.fn(row);\n        }\n      }\n      return resultPerItemId;\n    };\n  }\n\n  // We generate a new function with `new Function()` to avoid expensive patterns for JS engines\n  // such as a dynamic object assignment, for example `{ [dynamicKey]: value }`.\n  const filterItemCore = new Function('appliers', 'row', 'shouldApplyFilter', `\"use strict\";\n${appliers.map((applier, i) => `const shouldApply${i} = !shouldApplyFilter || shouldApplyFilter(${JSON.stringify(applier.item.field)});`).join('\\n')}\n\nconst result$$ = {\n${appliers.map((applier, i) => `  ${JSON.stringify(String(applier.item.id))}: !shouldApply${i} ? false : appliers[${i}].fn(row),`).join('\\n')}\n};\n\nreturn result$$;`.replaceAll('$$', String(filterItemsApplierId)));\n  filterItemsApplierId += 1;\n\n  // Assign to the arrow function a name to help debugging\n  const filterItem = (row, shouldApplyItem) => filterItemCore(appliers, row, shouldApplyItem);\n  return filterItem;\n};\nexport const shouldQuickFilterExcludeHiddenColumns = filterModel => {\n  return filterModel.quickFilterExcludeHiddenColumns ?? true;\n};\n\n/**\n * Generates a method to easily check if a row is matching the current quick filter.\n * @param {any[]} filterModel The model with which we want to filter the rows.\n * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.\n * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.\n */\nconst buildAggregatedQuickFilterApplier = (filterModel, apiRef) => {\n  const quickFilterValues = filterModel.quickFilterValues?.filter(Boolean) ?? [];\n  if (quickFilterValues.length === 0) {\n    return null;\n  }\n  const columnFields = shouldQuickFilterExcludeHiddenColumns(filterModel) ? gridVisibleColumnFieldsSelector(apiRef) : gridColumnFieldsSelector(apiRef);\n  const appliersPerField = [];\n  const {\n    ignoreDiacritics\n  } = apiRef.current.rootProps;\n  const publicApiRef = getPublicApiRef(apiRef);\n  columnFields.forEach(field => {\n    const column = apiRef.current.getColumn(field);\n    const getApplyQuickFilterFn = column?.getApplyQuickFilterFn;\n    if (getApplyQuickFilterFn) {\n      appliersPerField.push({\n        column,\n        appliers: quickFilterValues.map(quickFilterValue => {\n          const value = ignoreDiacritics ? removeDiacritics(quickFilterValue) : quickFilterValue;\n          return {\n            fn: getApplyQuickFilterFn(value, column, publicApiRef)\n          };\n        })\n      });\n    }\n  });\n  return function isRowMatchingQuickFilter(row, shouldApplyFilter) {\n    const result = {};\n\n    /* eslint-disable no-labels */\n    outer: for (let v = 0; v < quickFilterValues.length; v += 1) {\n      const filterValue = quickFilterValues[v];\n      for (let i = 0; i < appliersPerField.length; i += 1) {\n        const {\n          column,\n          appliers\n        } = appliersPerField[i];\n        const {\n          field\n        } = column;\n        if (shouldApplyFilter && !shouldApplyFilter(field)) {\n          continue;\n        }\n        const applier = appliers[v];\n        let value = apiRef.current.getRowValue(row, column);\n        if (applier.fn === null) {\n          continue;\n        }\n        if (ignoreDiacritics) {\n          value = removeDiacritics(value);\n        }\n        const isMatching = applier.fn(value, row, column, publicApiRef);\n        if (isMatching) {\n          result[filterValue] = true;\n          continue outer;\n        }\n      }\n      result[filterValue] = false;\n    }\n    return result;\n  };\n};\nexport const buildAggregatedFilterApplier = (filterModel, apiRef, disableEval) => {\n  const isRowMatchingFilterItems = buildAggregatedFilterItemsApplier(filterModel, apiRef, disableEval);\n  const isRowMatchingQuickFilter = buildAggregatedQuickFilterApplier(filterModel, apiRef);\n  return function isRowMatchingFilters(row, shouldApplyFilter, result) {\n    result.passingFilterItems = isRowMatchingFilterItems?.(row, shouldApplyFilter) ?? null;\n    result.passingQuickFilterValues = isRowMatchingQuickFilter?.(row, shouldApplyFilter) ?? null;\n  };\n};\nconst isNotNull = result => result != null;\nconst filterModelItems = (cache, apiRef, items) => {\n  if (!cache.cleanedFilterItems) {\n    cache.cleanedFilterItems = items.filter(item => getFilterCallbackFromItem(item, apiRef) !== null);\n  }\n  return cache.cleanedFilterItems;\n};\nexport const passFilterLogic = (allFilterItemResults, allQuickFilterResults, filterModel, apiRef, cache) => {\n  const cleanedFilterItems = filterModelItems(cache, apiRef, filterModel.items);\n  const cleanedFilterItemResults = allFilterItemResults.filter(isNotNull);\n  const cleanedQuickFilterResults = allQuickFilterResults.filter(isNotNull);\n\n  // get result for filter items model\n  if (cleanedFilterItemResults.length > 0) {\n    // Return true if the item pass with one of the rows\n    const filterItemPredicate = item => {\n      return cleanedFilterItemResults.some(filterItemResult => filterItemResult[item.id]);\n    };\n    const logicOperator = filterModel.logicOperator ?? getDefaultGridFilterModel().logicOperator;\n    if (logicOperator === GridLogicOperator.And) {\n      const passesAllFilters = cleanedFilterItems.every(filterItemPredicate);\n      if (!passesAllFilters) {\n        return false;\n      }\n    } else {\n      const passesSomeFilters = cleanedFilterItems.some(filterItemPredicate);\n      if (!passesSomeFilters) {\n        return false;\n      }\n    }\n  }\n\n  // get result for quick filter model\n  if (cleanedQuickFilterResults.length > 0 && filterModel.quickFilterValues != null) {\n    // Return true if the item pass with one of the rows\n    const quickFilterValuePredicate = value => {\n      return cleanedQuickFilterResults.some(quickFilterValueResult => quickFilterValueResult[value]);\n    };\n    const quickFilterLogicOperator = filterModel.quickFilterLogicOperator ?? getDefaultGridFilterModel().quickFilterLogicOperator;\n    if (quickFilterLogicOperator === GridLogicOperator.And) {\n      const passesAllQuickFilterValues = filterModel.quickFilterValues.every(quickFilterValuePredicate);\n      if (!passesAllQuickFilterValues) {\n        return false;\n      }\n    } else {\n      const passesSomeQuickFilterValues = filterModel.quickFilterValues.some(quickFilterValuePredicate);\n      if (!passesSomeQuickFilterValues) {\n        return false;\n      }\n    }\n  }\n  return true;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}