{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { styled, useTheme } from '@mui/material/styles';\nimport { useGridSelector } from '../../utils';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridColumnHeaderItem } from '../../../components/columnHeaders/GridColumnHeaderItem';\nimport { gridDimensionsSelector } from '../dimensions';\nimport { gridRenderContextColumnsSelector, gridVirtualizationColumnEnabledSelector } from '../virtualization';\nimport { computeOffsetLeft } from '../virtualization/useGridVirtualScroller';\nimport { GridColumnGroupHeader } from '../../../components/columnHeaders/GridColumnGroupHeader';\nimport { GridPinnedColumnPosition, gridColumnPositionsSelector, gridVisiblePinnedColumnDefinitionsSelector } from '../columns';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nimport { gridColumnGroupsUnwrappedModelSelector } from '../columnGrouping/gridColumnGroupsSelector';\nimport { GridScrollbarFillerCell as ScrollbarFiller } from '../../../components/GridScrollbarFillerCell';\nimport { getPinnedCellOffset } from '../../../internals/utils/getPinnedCellOffset';\nimport { GridColumnHeaderSeparatorSides } from '../../../components/columnHeaders/GridColumnHeaderSeparator';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GridColumnHeaderRow = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderRow',\n  overridesResolver: (_, styles) => styles.columnHeaderRow\n})({\n  display: 'flex'\n});\nexport const useGridColumnHeaders = props => {\n  const {\n    visibleColumns,\n    sortColumnLookup,\n    filterColumnLookup,\n    columnHeaderTabIndexState,\n    columnGroupHeaderTabIndexState,\n    columnHeaderFocus,\n    columnGroupHeaderFocus,\n    headerGroupingMaxDepth,\n    columnMenuState,\n    columnVisibility,\n    columnGroupsHeaderStructure,\n    hasOtherElementInTabSequence\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridPrivateApiContext();\n  const theme = useTheme();\n  const rootProps = useGridRootProps();\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const hasVirtualization = useGridSelector(apiRef, gridVirtualizationColumnEnabledSelector);\n  const columnGroupsModel = useGridSelector(apiRef, gridColumnGroupsUnwrappedModelSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const renderContext = useGridSelector(apiRef, gridRenderContextColumnsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const offsetLeft = computeOffsetLeft(columnPositions, renderContext, theme.direction, pinnedColumns.left.length);\n  const gridHasFiller = dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width;\n  React.useEffect(() => {\n    apiRef.current.columnHeadersContainerRef.current.scrollLeft = 0;\n  }, [apiRef]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  const leftRenderContext = React.useMemo(() => {\n    return pinnedColumns.left.length ? {\n      firstColumnIndex: 0,\n      lastColumnIndex: pinnedColumns.left.length\n    } : null;\n  }, [pinnedColumns.left.length]);\n  const rightRenderContext = React.useMemo(() => {\n    return pinnedColumns.right.length ? {\n      firstColumnIndex: visibleColumns.length - pinnedColumns.right.length,\n      lastColumnIndex: visibleColumns.length\n    } : null;\n  }, [pinnedColumns.right.length, visibleColumns.length]);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n\n  // Helper for computation common between getColumnHeaders and getColumnGroupHeaders\n  const getColumnsToRender = params => {\n    const {\n      renderContext: currentContext = renderContext,\n      // TODO: `minFirstColumn` is not used anymore, could be refactored out.\n      maxLastColumn = visibleColumns.length\n    } = params || {};\n    const firstColumnToRender = !hasVirtualization ? 0 : currentContext.firstColumnIndex;\n    const lastColumnToRender = !hasVirtualization ? maxLastColumn : currentContext.lastColumnIndex;\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    return {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender\n    };\n  };\n  const getFillers = (params, children, leftOverflow, borderTop = false) => {\n    const isPinnedRight = params?.position === GridPinnedColumnPosition.RIGHT;\n    const isNotPinned = params?.position === undefined;\n    const hasScrollbarFiller = pinnedColumns.right.length > 0 && isPinnedRight || pinnedColumns.right.length === 0 && isNotPinned;\n    const leftOffsetWidth = offsetLeft - leftOverflow;\n    return /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        style: {\n          width: leftOffsetWidth\n        }\n      }), children, isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        className: clsx(gridClasses.filler, borderTop && gridClasses['filler--borderTop'])\n      }), hasScrollbarFiller && /*#__PURE__*/_jsx(ScrollbarFiller, {\n        header: true,\n        borderTop: borderTop,\n        pinnedRight: isPinnedRight\n      })]\n    });\n  };\n  const getCellOffsetStyle = ({\n    pinnedPosition,\n    columnIndex,\n    computedWidth\n  }) => {\n    let style;\n    if (pinnedPosition === 'left' || pinnedPosition === 'right') {\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, computedWidth, columnIndex, columnPositions, dimensions);\n      if (pinnedPosition === 'left') {\n        style = {\n          left: pinnedOffset\n        };\n      }\n      if (pinnedPosition === 'right') {\n        style = {\n          right: pinnedOffset\n        };\n      }\n    }\n    return style;\n  };\n  const getColumnHeaders = (params, other = {}) => {\n    const {\n      renderedColumns,\n      firstColumnToRender\n    } = getColumnsToRender(params);\n    const columns = [];\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const colDef = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef.field;\n      const open = columnMenuState.open && columnMenuState.field === colDef.field;\n      const pinnedPosition = params?.position;\n      const style = getCellOffsetStyle({\n        pinnedPosition,\n        columnIndex,\n        computedWidth: colDef.computedWidth\n      });\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[colDef.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[colDef.field] && filterColumnLookup[colDef.field].length,\n        headerHeight: dimensions.headerHeight,\n        isDragging: colDef.field === dragCol,\n        colDef: colDef,\n        colIndex: columnIndex,\n        isResizing: resizeCol === colDef.field,\n        isLast: columnIndex === columnPositions.length - 1,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        style: style,\n        indexInSection: i,\n        sectionLength: renderedColumns.length,\n        gridHasFiller: gridHasFiller\n      }, other), colDef.field));\n    }\n    return getFillers(params, columns, 0);\n  };\n  const getColumnHeadersRow = () => {\n    return /*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n      role: \"row\",\n      \"aria-rowindex\": headerGroupingMaxDepth + 1,\n      ownerState: rootProps,\n      className: pinnedRows.top.length === 0 ? gridClasses['row--borderBottom'] : undefined,\n      children: [leftRenderContext && getColumnHeaders({\n        position: GridPinnedColumnPosition.LEFT,\n        renderContext: leftRenderContext,\n        minFirstColumn: leftRenderContext.firstColumnIndex,\n        maxLastColumn: leftRenderContext.lastColumnIndex\n      }, {\n        disableReorder: true\n      }), getColumnHeaders({\n        renderContext,\n        minFirstColumn: pinnedColumns.left.length,\n        maxLastColumn: visibleColumns.length - pinnedColumns.right.length\n      }), rightRenderContext && getColumnHeaders({\n        position: GridPinnedColumnPosition.RIGHT,\n        renderContext: rightRenderContext,\n        minFirstColumn: rightRenderContext.firstColumnIndex,\n        maxLastColumn: rightRenderContext.lastColumnIndex\n      }, {\n        disableReorder: true,\n        separatorSide: GridColumnHeaderSeparatorSides.Left\n      })]\n    });\n  };\n  const getColumnGroupHeaders = ({\n    depth,\n    params\n  }) => {\n    const columnsToRender = getColumnsToRender(params);\n    if (columnsToRender.renderedColumns.length === 0) {\n      return null;\n    }\n    const {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender\n    } = columnsToRender;\n    const rowStructure = columnGroupsHeaderStructure[depth];\n    const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;\n    const firstGroupToRender = columnGroupsModel[firstColumnFieldToRender]?.[depth] ?? null;\n    const firstGroupIndex = rowStructure.findIndex(({\n      groupId,\n      columnFields\n    }) => groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender));\n    const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;\n    const lastGroupToRender = columnGroupsModel[lastColumnFieldToRender]?.[depth] ?? null;\n    const lastGroupIndex = rowStructure.findIndex(({\n      groupId,\n      columnFields\n    }) => groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender));\n    const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map(groupStructure => {\n      return _extends({}, groupStructure, {\n        columnFields: groupStructure.columnFields.filter(field => columnVisibility[field] !== false)\n      });\n    }).filter(groupStructure => groupStructure.columnFields.length > 0);\n    const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);\n    const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);\n    const leftOverflow = hiddenGroupColumns.reduce((acc, field) => {\n      const column = apiRef.current.getColumn(field);\n      return acc + (column.computedWidth ?? 0);\n    }, 0);\n    let columnIndex = firstColumnToRender;\n    const children = visibleColumnGroupHeader.map(({\n      groupId,\n      columnFields\n    }, index) => {\n      const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);\n      const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;\n      const headerInfo = {\n        groupId,\n        width: columnFields.reduce((acc, field) => acc + apiRef.current.getColumn(field).computedWidth, 0),\n        fields: columnFields,\n        colIndex: columnIndex,\n        hasFocus,\n        tabIndex\n      };\n      const pinnedPosition = params.position;\n      const style = getCellOffsetStyle({\n        pinnedPosition,\n        columnIndex,\n        computedWidth: headerInfo.width\n      });\n      columnIndex += columnFields.length;\n      let indexInSection = index;\n      if (pinnedPosition === 'left') {\n        // Group headers can expand to multiple columns, we need to adjust the index\n        indexInSection = columnIndex - 1;\n      }\n      return /*#__PURE__*/_jsx(GridColumnGroupHeader, {\n        groupId: groupId,\n        width: headerInfo.width,\n        fields: headerInfo.fields,\n        colIndex: headerInfo.colIndex,\n        depth: depth,\n        isLastColumn: headerInfo.colIndex === visibleColumns.length - headerInfo.fields.length,\n        maxDepth: headerGroupingMaxDepth,\n        height: dimensions.headerHeight,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        style: style,\n        indexInSection: indexInSection,\n        sectionLength: renderedColumns.length,\n        gridHasFiller: gridHasFiller\n      }, index);\n    });\n    return getFillers(params, children, leftOverflow);\n  };\n  const getColumnGroupHeadersRows = () => {\n    if (headerGroupingMaxDepth === 0) {\n      return null;\n    }\n    const headerRows = [];\n    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {\n      headerRows.push( /*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n        role: \"row\",\n        \"aria-rowindex\": depth + 1,\n        ownerState: rootProps,\n        children: [leftRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: GridPinnedColumnPosition.LEFT,\n            renderContext: leftRenderContext,\n            minFirstColumn: leftRenderContext.firstColumnIndex,\n            maxLastColumn: leftRenderContext.lastColumnIndex\n          }\n        }), getColumnGroupHeaders({\n          depth,\n          params: {\n            renderContext\n          }\n        }), rightRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: GridPinnedColumnPosition.RIGHT,\n            renderContext: rightRenderContext,\n            minFirstColumn: rightRenderContext.firstColumnIndex,\n            maxLastColumn: rightRenderContext.lastColumnIndex\n          }\n        })]\n      }, depth));\n    }\n    return headerRows;\n  };\n  return {\n    renderContext,\n    leftRenderContext,\n    rightRenderContext,\n    pinnedColumns,\n    visibleColumns,\n    getCellOffsetStyle,\n    getFillers,\n    getColumnHeadersRow,\n    getColumnsToRender,\n    getColumnGroupHeadersRows,\n    isDragging: !!dragCol,\n    getInnerProps: () => ({\n      role: 'rowgroup'\n    })\n  };\n};","map":{"version":3,"names":["_extends","React","clsx","styled","useTheme","useGridSelector","useGridRootProps","useGridPrivateApiContext","useGridApiEventHandler","GridColumnHeaderItem","gridDimensionsSelector","gridRenderContextColumnsSelector","gridVirtualizationColumnEnabledSelector","computeOffsetLeft","GridColumnGroupHeader","GridPinnedColumnPosition","gridColumnPositionsSelector","gridVisiblePinnedColumnDefinitionsSelector","gridPinnedRowsSelector","gridColumnGroupsUnwrappedModelSelector","GridScrollbarFillerCell","ScrollbarFiller","getPinnedCellOffset","GridColumnHeaderSeparatorSides","gridClasses","jsx","_jsx","jsxs","_jsxs","GridColumnHeaderRow","name","slot","overridesResolver","_","styles","columnHeaderRow","display","useGridColumnHeaders","props","visibleColumns","sortColumnLookup","filterColumnLookup","columnHeaderTabIndexState","columnGroupHeaderTabIndexState","columnHeaderFocus","columnGroupHeaderFocus","headerGroupingMaxDepth","columnMenuState","columnVisibility","columnGroupsHeaderStructure","hasOtherElementInTabSequence","dragCol","setDragCol","useState","resizeCol","setResizeCol","apiRef","theme","rootProps","dimensions","hasVirtualization","columnGroupsModel","columnPositions","renderContext","pinnedColumns","pinnedRows","offsetLeft","direction","left","length","gridHasFiller","columnsTotalWidth","viewportOuterSize","width","useEffect","current","columnHeadersContainerRef","scrollLeft","handleColumnResizeStart","useCallback","params","field","handleColumnResizeStop","handleColumnReorderStart","handleColumnReorderStop","leftRenderContext","useMemo","firstColumnIndex","lastColumnIndex","rightRenderContext","right","getColumnsToRender","currentContext","maxLastColumn","firstColumnToRender","lastColumnToRender","renderedColumns","slice","getFillers","children","leftOverflow","borderTop","isPinnedRight","position","RIGHT","isNotPinned","undefined","hasScrollbarFiller","leftOffsetWidth","Fragment","role","style","className","filler","header","pinnedRight","getCellOffsetStyle","pinnedPosition","columnIndex","computedWidth","pinnedOffset","getColumnHeaders","other","columns","i","colDef","isFirstColumn","tabIndex","hasFocus","open","push","columnMenuOpen","filterItemsCounter","headerHeight","isDragging","colIndex","isResizing","isLast","indexInSection","sectionLength","getColumnHeadersRow","ownerState","top","LEFT","minFirstColumn","disableReorder","separatorSide","Left","getColumnGroupHeaders","depth","columnsToRender","rowStructure","firstColumnFieldToRender","firstGroupToRender","firstGroupIndex","findIndex","groupId","columnFields","includes","lastColumnFieldToRender","lastGroupToRender","lastGroupIndex","visibleColumnGroupHeader","map","groupStructure","filter","firstVisibleColumnIndex","indexOf","hiddenGroupColumns","reduce","acc","column","getColumn","index","headerInfo","fields","isLastColumn","maxDepth","height","getColumnGroupHeadersRows","headerRows","getInnerProps"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { styled, useTheme } from '@mui/material/styles';\nimport { useGridSelector } from '../../utils';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridColumnHeaderItem } from '../../../components/columnHeaders/GridColumnHeaderItem';\nimport { gridDimensionsSelector } from '../dimensions';\nimport { gridRenderContextColumnsSelector, gridVirtualizationColumnEnabledSelector } from '../virtualization';\nimport { computeOffsetLeft } from '../virtualization/useGridVirtualScroller';\nimport { GridColumnGroupHeader } from '../../../components/columnHeaders/GridColumnGroupHeader';\nimport { GridPinnedColumnPosition, gridColumnPositionsSelector, gridVisiblePinnedColumnDefinitionsSelector } from '../columns';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nimport { gridColumnGroupsUnwrappedModelSelector } from '../columnGrouping/gridColumnGroupsSelector';\nimport { GridScrollbarFillerCell as ScrollbarFiller } from '../../../components/GridScrollbarFillerCell';\nimport { getPinnedCellOffset } from '../../../internals/utils/getPinnedCellOffset';\nimport { GridColumnHeaderSeparatorSides } from '../../../components/columnHeaders/GridColumnHeaderSeparator';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GridColumnHeaderRow = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderRow',\n  overridesResolver: (_, styles) => styles.columnHeaderRow\n})({\n  display: 'flex'\n});\nexport const useGridColumnHeaders = props => {\n  const {\n    visibleColumns,\n    sortColumnLookup,\n    filterColumnLookup,\n    columnHeaderTabIndexState,\n    columnGroupHeaderTabIndexState,\n    columnHeaderFocus,\n    columnGroupHeaderFocus,\n    headerGroupingMaxDepth,\n    columnMenuState,\n    columnVisibility,\n    columnGroupsHeaderStructure,\n    hasOtherElementInTabSequence\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridPrivateApiContext();\n  const theme = useTheme();\n  const rootProps = useGridRootProps();\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const hasVirtualization = useGridSelector(apiRef, gridVirtualizationColumnEnabledSelector);\n  const columnGroupsModel = useGridSelector(apiRef, gridColumnGroupsUnwrappedModelSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const renderContext = useGridSelector(apiRef, gridRenderContextColumnsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const offsetLeft = computeOffsetLeft(columnPositions, renderContext, theme.direction, pinnedColumns.left.length);\n  const gridHasFiller = dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width;\n  React.useEffect(() => {\n    apiRef.current.columnHeadersContainerRef.current.scrollLeft = 0;\n  }, [apiRef]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  const leftRenderContext = React.useMemo(() => {\n    return pinnedColumns.left.length ? {\n      firstColumnIndex: 0,\n      lastColumnIndex: pinnedColumns.left.length\n    } : null;\n  }, [pinnedColumns.left.length]);\n  const rightRenderContext = React.useMemo(() => {\n    return pinnedColumns.right.length ? {\n      firstColumnIndex: visibleColumns.length - pinnedColumns.right.length,\n      lastColumnIndex: visibleColumns.length\n    } : null;\n  }, [pinnedColumns.right.length, visibleColumns.length]);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n\n  // Helper for computation common between getColumnHeaders and getColumnGroupHeaders\n  const getColumnsToRender = params => {\n    const {\n      renderContext: currentContext = renderContext,\n      // TODO: `minFirstColumn` is not used anymore, could be refactored out.\n      maxLastColumn = visibleColumns.length\n    } = params || {};\n    const firstColumnToRender = !hasVirtualization ? 0 : currentContext.firstColumnIndex;\n    const lastColumnToRender = !hasVirtualization ? maxLastColumn : currentContext.lastColumnIndex;\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    return {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender\n    };\n  };\n  const getFillers = (params, children, leftOverflow, borderTop = false) => {\n    const isPinnedRight = params?.position === GridPinnedColumnPosition.RIGHT;\n    const isNotPinned = params?.position === undefined;\n    const hasScrollbarFiller = pinnedColumns.right.length > 0 && isPinnedRight || pinnedColumns.right.length === 0 && isNotPinned;\n    const leftOffsetWidth = offsetLeft - leftOverflow;\n    return /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        style: {\n          width: leftOffsetWidth\n        }\n      }), children, isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        className: clsx(gridClasses.filler, borderTop && gridClasses['filler--borderTop'])\n      }), hasScrollbarFiller && /*#__PURE__*/_jsx(ScrollbarFiller, {\n        header: true,\n        borderTop: borderTop,\n        pinnedRight: isPinnedRight\n      })]\n    });\n  };\n  const getCellOffsetStyle = ({\n    pinnedPosition,\n    columnIndex,\n    computedWidth\n  }) => {\n    let style;\n    if (pinnedPosition === 'left' || pinnedPosition === 'right') {\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, computedWidth, columnIndex, columnPositions, dimensions);\n      if (pinnedPosition === 'left') {\n        style = {\n          left: pinnedOffset\n        };\n      }\n      if (pinnedPosition === 'right') {\n        style = {\n          right: pinnedOffset\n        };\n      }\n    }\n    return style;\n  };\n  const getColumnHeaders = (params, other = {}) => {\n    const {\n      renderedColumns,\n      firstColumnToRender\n    } = getColumnsToRender(params);\n    const columns = [];\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const colDef = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef.field;\n      const open = columnMenuState.open && columnMenuState.field === colDef.field;\n      const pinnedPosition = params?.position;\n      const style = getCellOffsetStyle({\n        pinnedPosition,\n        columnIndex,\n        computedWidth: colDef.computedWidth\n      });\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[colDef.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[colDef.field] && filterColumnLookup[colDef.field].length,\n        headerHeight: dimensions.headerHeight,\n        isDragging: colDef.field === dragCol,\n        colDef: colDef,\n        colIndex: columnIndex,\n        isResizing: resizeCol === colDef.field,\n        isLast: columnIndex === columnPositions.length - 1,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        style: style,\n        indexInSection: i,\n        sectionLength: renderedColumns.length,\n        gridHasFiller: gridHasFiller\n      }, other), colDef.field));\n    }\n    return getFillers(params, columns, 0);\n  };\n  const getColumnHeadersRow = () => {\n    return /*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n      role: \"row\",\n      \"aria-rowindex\": headerGroupingMaxDepth + 1,\n      ownerState: rootProps,\n      className: pinnedRows.top.length === 0 ? gridClasses['row--borderBottom'] : undefined,\n      children: [leftRenderContext && getColumnHeaders({\n        position: GridPinnedColumnPosition.LEFT,\n        renderContext: leftRenderContext,\n        minFirstColumn: leftRenderContext.firstColumnIndex,\n        maxLastColumn: leftRenderContext.lastColumnIndex\n      }, {\n        disableReorder: true\n      }), getColumnHeaders({\n        renderContext,\n        minFirstColumn: pinnedColumns.left.length,\n        maxLastColumn: visibleColumns.length - pinnedColumns.right.length\n      }), rightRenderContext && getColumnHeaders({\n        position: GridPinnedColumnPosition.RIGHT,\n        renderContext: rightRenderContext,\n        minFirstColumn: rightRenderContext.firstColumnIndex,\n        maxLastColumn: rightRenderContext.lastColumnIndex\n      }, {\n        disableReorder: true,\n        separatorSide: GridColumnHeaderSeparatorSides.Left\n      })]\n    });\n  };\n  const getColumnGroupHeaders = ({\n    depth,\n    params\n  }) => {\n    const columnsToRender = getColumnsToRender(params);\n    if (columnsToRender.renderedColumns.length === 0) {\n      return null;\n    }\n    const {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender\n    } = columnsToRender;\n    const rowStructure = columnGroupsHeaderStructure[depth];\n    const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;\n    const firstGroupToRender = columnGroupsModel[firstColumnFieldToRender]?.[depth] ?? null;\n    const firstGroupIndex = rowStructure.findIndex(({\n      groupId,\n      columnFields\n    }) => groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender));\n    const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;\n    const lastGroupToRender = columnGroupsModel[lastColumnFieldToRender]?.[depth] ?? null;\n    const lastGroupIndex = rowStructure.findIndex(({\n      groupId,\n      columnFields\n    }) => groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender));\n    const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map(groupStructure => {\n      return _extends({}, groupStructure, {\n        columnFields: groupStructure.columnFields.filter(field => columnVisibility[field] !== false)\n      });\n    }).filter(groupStructure => groupStructure.columnFields.length > 0);\n    const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);\n    const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);\n    const leftOverflow = hiddenGroupColumns.reduce((acc, field) => {\n      const column = apiRef.current.getColumn(field);\n      return acc + (column.computedWidth ?? 0);\n    }, 0);\n    let columnIndex = firstColumnToRender;\n    const children = visibleColumnGroupHeader.map(({\n      groupId,\n      columnFields\n    }, index) => {\n      const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);\n      const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;\n      const headerInfo = {\n        groupId,\n        width: columnFields.reduce((acc, field) => acc + apiRef.current.getColumn(field).computedWidth, 0),\n        fields: columnFields,\n        colIndex: columnIndex,\n        hasFocus,\n        tabIndex\n      };\n      const pinnedPosition = params.position;\n      const style = getCellOffsetStyle({\n        pinnedPosition,\n        columnIndex,\n        computedWidth: headerInfo.width\n      });\n      columnIndex += columnFields.length;\n      let indexInSection = index;\n      if (pinnedPosition === 'left') {\n        // Group headers can expand to multiple columns, we need to adjust the index\n        indexInSection = columnIndex - 1;\n      }\n      return /*#__PURE__*/_jsx(GridColumnGroupHeader, {\n        groupId: groupId,\n        width: headerInfo.width,\n        fields: headerInfo.fields,\n        colIndex: headerInfo.colIndex,\n        depth: depth,\n        isLastColumn: headerInfo.colIndex === visibleColumns.length - headerInfo.fields.length,\n        maxDepth: headerGroupingMaxDepth,\n        height: dimensions.headerHeight,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        style: style,\n        indexInSection: indexInSection,\n        sectionLength: renderedColumns.length,\n        gridHasFiller: gridHasFiller\n      }, index);\n    });\n    return getFillers(params, children, leftOverflow);\n  };\n  const getColumnGroupHeadersRows = () => {\n    if (headerGroupingMaxDepth === 0) {\n      return null;\n    }\n    const headerRows = [];\n    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {\n      headerRows.push( /*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n        role: \"row\",\n        \"aria-rowindex\": depth + 1,\n        ownerState: rootProps,\n        children: [leftRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: GridPinnedColumnPosition.LEFT,\n            renderContext: leftRenderContext,\n            minFirstColumn: leftRenderContext.firstColumnIndex,\n            maxLastColumn: leftRenderContext.lastColumnIndex\n          }\n        }), getColumnGroupHeaders({\n          depth,\n          params: {\n            renderContext\n          }\n        }), rightRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: GridPinnedColumnPosition.RIGHT,\n            renderContext: rightRenderContext,\n            minFirstColumn: rightRenderContext.firstColumnIndex,\n            maxLastColumn: rightRenderContext.lastColumnIndex\n          }\n        })]\n      }, depth));\n    }\n    return headerRows;\n  };\n  return {\n    renderContext,\n    leftRenderContext,\n    rightRenderContext,\n    pinnedColumns,\n    visibleColumns,\n    getCellOffsetStyle,\n    getFillers,\n    getColumnHeadersRow,\n    getColumnsToRender,\n    getColumnGroupHeadersRows,\n    isDragging: !!dragCol,\n    getInnerProps: () => ({\n      role: 'rowgroup'\n    })\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}