{"ast":null,"code":"var _jsxFileName = \"E:\\\\OneDrive - delaPlex\\\\Project\\\\BlueBerry\\\\ChatGpt\\\\21Aug24\\\\Blueberry-bot\\\\frontend\\\\src\\\\export\\\\Export_data.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { CSVLink } from 'react-csv';\nimport html2canvas from 'html2canvas';\nimport DownloadSharpIcon from '@mui/icons-material/DownloadSharp';\nimport { Chart } from 'react-chartjs-2';\nimport jsPDF from 'jspdf';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ExportData = ({\n  message,\n  user_query\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const convertMessageToCSVData = (message, user_query) => {\n    const csvData = [];\n\n    // Add user_query at the top of the CSV data\n    if (user_query) {\n      csvData.push([`User Query: ${user_query}`]);\n      csvData.push([]); // Add an empty row for separation\n    }\n\n    // Convert message data to CSV format\n    if (message.table && message.table.headers && message.table.rows) {\n      csvData.push(message.table.headers);\n      csvData.push(...message.table.rows);\n    } else if (message.text) {\n      csvData.push([message.text]);\n    }\n    return csvData;\n  };\n  const downloadChartAsPDF = async () => {\n    if (chartRef.current) {\n      try {\n        const canvas = await html2canvas(chartRef.current, {\n          scale: 2,\n          // Increase resolution\n          useCORS: true,\n          // Handle cross-origin images\n          backgroundColor: null // Transparent background\n        });\n        const imgData = canvas.toDataURL('image/png');\n        const pdf = new jsPDF({\n          orientation: 'landscape',\n          unit: 'px',\n          format: [canvas.width, canvas.height] // Match PDF size to canvas size\n        });\n\n        // Add user_query at the top of the PDF\n        if (user_query) {\n          pdf.text(`User Query: ${user_query}`, 10, 10);\n        }\n        pdf.addImage(imgData, 'PNG', 0, 20, canvas.width, canvas.height); // Adjust Y position for chart\n        pdf.save(`chart-${new Date().toISOString()}.pdf`);\n      } catch (error) {\n        console.error(\"Failed to download chart as PDF\", error);\n      }\n    }\n  };\n  const csvData = convertMessageToCSVData(message, user_query);\n  const fileName = `chatbot-response-${new Date().toISOString()}.csv`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: message.chart && Object.keys(message.chart).length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: downloadChartAsPDF,\n        className: \"download-button\",\n        children: /*#__PURE__*/_jsxDEV(DownloadSharpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chart-container\",\n        ref: chartRef,\n        style: {\n          position: 'fixed',\n          top: '-10000px',\n          // Off-screen but within renderable area\n          left: '-10000px',\n          width: '600px',\n          height: '400px',\n          pointerEvents: 'none'\n        },\n        children: /*#__PURE__*/_jsxDEV(Chart, {\n          type: message.chart.type,\n          data: message.chart.data,\n          options: message.chart.options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(CSVLink, {\n      data: csvData,\n      filename: fileName,\n      className: \"download-csv-link\",\n      children: /*#__PURE__*/_jsxDEV(DownloadSharpIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(ExportData, \"aW/6lq35noP8VJrK3G9P8gm4OYM=\");\n_c = ExportData;\nexport default ExportData;\nvar _c;\n$RefreshReg$(_c, \"ExportData\");","map":{"version":3,"names":["React","useRef","CSVLink","html2canvas","DownloadSharpIcon","Chart","jsPDF","jsxDEV","_jsxDEV","Fragment","_Fragment","ExportData","message","user_query","_s","chartRef","convertMessageToCSVData","csvData","push","table","headers","rows","text","downloadChartAsPDF","current","canvas","scale","useCORS","backgroundColor","imgData","toDataURL","pdf","orientation","unit","format","width","height","addImage","save","Date","toISOString","error","console","fileName","children","chart","Object","keys","length","onClick","className","_jsxFileName","lineNumber","columnNumber","id","ref","style","position","top","left","pointerEvents","type","data","options","filename","_c","$RefreshReg$"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/src/export/Export_data.js"],"sourcesContent":["import React, { useRef } from 'react';\r\nimport { CSVLink } from 'react-csv';\r\nimport html2canvas from 'html2canvas';\r\nimport DownloadSharpIcon from '@mui/icons-material/DownloadSharp';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport jsPDF from 'jspdf';\r\n\r\nconst ExportData = ({ message, user_query }) => {\r\n    const chartRef = useRef(null);\r\n    const convertMessageToCSVData = (message, user_query) => {\r\n        const csvData = [];\r\n\r\n        // Add user_query at the top of the CSV data\r\n        if (user_query) {\r\n            csvData.push([`User Query: ${user_query}`]);\r\n            csvData.push([]); // Add an empty row for separation\r\n        }\r\n\r\n        // Convert message data to CSV format\r\n        if (message.table && message.table.headers && message.table.rows) {\r\n            csvData.push(message.table.headers);\r\n            csvData.push(...message.table.rows);\r\n        } else if (message.text) {\r\n            csvData.push([message.text]);\r\n        }\r\n\r\n        return csvData;\r\n    };\r\n\r\n    const downloadChartAsPDF = async () => {\r\n        if (chartRef.current) {\r\n            try {\r\n                const canvas = await html2canvas(chartRef.current, {\r\n                    scale: 2, // Increase resolution\r\n                    useCORS: true, // Handle cross-origin images\r\n                    backgroundColor: null, // Transparent background\r\n                });\r\n\r\n                const imgData = canvas.toDataURL('image/png');\r\n                const pdf = new jsPDF({\r\n                    orientation: 'landscape',\r\n                    unit: 'px',\r\n                    format: [canvas.width, canvas.height], // Match PDF size to canvas size\r\n                });\r\n\r\n                // Add user_query at the top of the PDF\r\n                if (user_query) {\r\n                    pdf.text(`User Query: ${user_query}`, 10, 10);\r\n                }\r\n\r\n                pdf.addImage(imgData, 'PNG', 0, 20, canvas.width, canvas.height); // Adjust Y position for chart\r\n                pdf.save(`chart-${new Date().toISOString()}.pdf`);\r\n            } catch (error) {\r\n                console.error(\"Failed to download chart as PDF\", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const csvData = convertMessageToCSVData(message, user_query);\r\n    const fileName = `chatbot-response-${new Date().toISOString()}.csv`;\r\n\r\n    return (\r\n        <div>\r\n            {message.chart && Object.keys(message.chart).length > 0 ? (\r\n                <>\r\n                    <button onClick={downloadChartAsPDF} className=\"download-button\">\r\n                        <DownloadSharpIcon />\r\n                    </button>\r\n                    {/* Off-screen chart container, but within the viewport */}\r\n                    <div\r\n                        id=\"chart-container\"\r\n                        ref={chartRef}\r\n                        style={{\r\n                            position: 'fixed',\r\n                            top: '-10000px', // Off-screen but within renderable area\r\n                            left: '-10000px', \r\n                            width: '600px',\r\n                            height: '400px',\r\n                            pointerEvents: 'none',\r\n                        }}\r\n                    >\r\n                        <Chart type={message.chart.type} data={message.chart.data} options={message.chart.options} />\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <CSVLink data={csvData} filename={fileName} className=\"download-csv-link\">\r\n                    <DownloadSharpIcon />\r\n                </CSVLink>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExportData;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}