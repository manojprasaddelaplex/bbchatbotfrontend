{"ast":null,"code":"import * as React from 'react';\nimport { getGridCellElement, getGridColumnHeaderElement, getGridRowElement } from '../../../utils/domUtils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nexport class MissingRowIdError extends Error {}\n\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\nexport function useGridParamsApi(apiRef) {\n  const getColumnHeaderParams = React.useCallback(field => ({\n    field,\n    colDef: apiRef.current.getColumn(field)\n  }), [apiRef]);\n  const getRowParams = React.useCallback(id => {\n    const row = apiRef.current.getRow(id);\n    if (!row) {\n      throw new MissingRowIdError(\"No row with id #\".concat(id, \" found\"));\n    }\n    const params = {\n      id,\n      columns: apiRef.current.getAllColumns(),\n      row\n    };\n    return params;\n  }, [apiRef]);\n  const getCellParams = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n    if (!row || !rowNode) {\n      throw new MissingRowIdError(\"No row with id #\".concat(id, \" found\"));\n    }\n    const rawValue = row[field];\n    const value = colDef !== null && colDef !== void 0 && colDef.valueGetter ? colDef.valueGetter(rawValue, row, colDef, apiRef) : rawValue;\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      colDef,\n      cellMode: apiRef.current.getCellMode(id, field),\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,\n      value,\n      formattedValue: value,\n      isEditable: false\n    };\n    if (colDef && colDef.valueFormatter) {\n      params.formattedValue = colDef.valueFormatter(value, row, colDef, apiRef);\n    }\n    params.isEditable = colDef && apiRef.current.isCellEditable(params);\n    return params;\n  }, [apiRef]);\n  const getCellValue = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    if (!row) {\n      throw new MissingRowIdError(\"No row with id #\".concat(id, \" found\"));\n    }\n    if (!colDef || !colDef.valueGetter) {\n      return row[field];\n    }\n    return colDef.valueGetter(row[colDef.field], row, colDef, apiRef);\n  }, [apiRef]);\n  const getRowValue = React.useCallback((row, colDef) => {\n    const field = colDef.field;\n    if (!colDef || !colDef.valueGetter) {\n      return row[field];\n    }\n    const value = row[colDef.field];\n    return colDef.valueGetter(value, row, colDef, apiRef);\n  }, [apiRef]);\n  const getRowFormattedValue = React.useCallback((row, colDef) => {\n    const value = getRowValue(row, colDef);\n    if (!colDef || !colDef.valueFormatter) {\n      return value;\n    }\n    return colDef.valueFormatter(value, row, colDef, apiRef);\n  }, [apiRef, getRowValue]);\n  const getColumnHeaderElement = React.useCallback(field => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);\n  }, [apiRef]);\n  const getRowElement = React.useCallback(id => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridRowElement(apiRef.current.rootElementRef.current, id);\n  }, [apiRef]);\n  const getCellElement = React.useCallback((id, field) => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridCellElement(apiRef.current.rootElementRef.current, {\n      id,\n      field\n    });\n  }, [apiRef]);\n  const paramsApi = {\n    getCellValue,\n    getCellParams,\n    getCellElement,\n    getRowValue,\n    getRowFormattedValue,\n    getRowParams,\n    getRowElement,\n    getColumnHeaderParams,\n    getColumnHeaderElement\n  };\n  useGridApiMethod(apiRef, paramsApi, 'public');\n}","map":{"version":3,"names":["React","getGridCellElement","getGridColumnHeaderElement","getGridRowElement","useGridApiMethod","gridFocusCellSelector","gridTabIndexCellSelector","MissingRowIdError","Error","useGridParamsApi","apiRef","getColumnHeaderParams","useCallback","field","colDef","current","getColumn","getRowParams","id","row","getRow","concat","params","columns","getAllColumns","getCellParams","rowNode","getRowNode","rawValue","value","valueGetter","cellFocus","cellTabIndex","cellMode","getCellMode","hasFocus","tabIndex","formattedValue","isEditable","valueFormatter","isCellEditable","getCellValue","getRowValue","getRowFormattedValue","getColumnHeaderElement","rootElementRef","getRowElement","getCellElement","paramsApi"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/node_modules/@mui/x-data-grid/hooks/features/rows/useGridParamsApi.js"],"sourcesContent":["import * as React from 'react';\nimport { getGridCellElement, getGridColumnHeaderElement, getGridRowElement } from '../../../utils/domUtils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nexport class MissingRowIdError extends Error {}\n\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\nexport function useGridParamsApi(apiRef) {\n  const getColumnHeaderParams = React.useCallback(field => ({\n    field,\n    colDef: apiRef.current.getColumn(field)\n  }), [apiRef]);\n  const getRowParams = React.useCallback(id => {\n    const row = apiRef.current.getRow(id);\n    if (!row) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n    const params = {\n      id,\n      columns: apiRef.current.getAllColumns(),\n      row\n    };\n    return params;\n  }, [apiRef]);\n  const getCellParams = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n    if (!row || !rowNode) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n    const rawValue = row[field];\n    const value = colDef?.valueGetter ? colDef.valueGetter(rawValue, row, colDef, apiRef) : rawValue;\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      colDef,\n      cellMode: apiRef.current.getCellMode(id, field),\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,\n      value,\n      formattedValue: value,\n      isEditable: false\n    };\n    if (colDef && colDef.valueFormatter) {\n      params.formattedValue = colDef.valueFormatter(value, row, colDef, apiRef);\n    }\n    params.isEditable = colDef && apiRef.current.isCellEditable(params);\n    return params;\n  }, [apiRef]);\n  const getCellValue = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    if (!row) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n    if (!colDef || !colDef.valueGetter) {\n      return row[field];\n    }\n    return colDef.valueGetter(row[colDef.field], row, colDef, apiRef);\n  }, [apiRef]);\n  const getRowValue = React.useCallback((row, colDef) => {\n    const field = colDef.field;\n    if (!colDef || !colDef.valueGetter) {\n      return row[field];\n    }\n    const value = row[colDef.field];\n    return colDef.valueGetter(value, row, colDef, apiRef);\n  }, [apiRef]);\n  const getRowFormattedValue = React.useCallback((row, colDef) => {\n    const value = getRowValue(row, colDef);\n    if (!colDef || !colDef.valueFormatter) {\n      return value;\n    }\n    return colDef.valueFormatter(value, row, colDef, apiRef);\n  }, [apiRef, getRowValue]);\n  const getColumnHeaderElement = React.useCallback(field => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);\n  }, [apiRef]);\n  const getRowElement = React.useCallback(id => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridRowElement(apiRef.current.rootElementRef.current, id);\n  }, [apiRef]);\n  const getCellElement = React.useCallback((id, field) => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridCellElement(apiRef.current.rootElementRef.current, {\n      id,\n      field\n    });\n  }, [apiRef]);\n  const paramsApi = {\n    getCellValue,\n    getCellParams,\n    getCellElement,\n    getRowValue,\n    getRowFormattedValue,\n    getRowParams,\n    getRowElement,\n    getColumnHeaderParams,\n    getColumnHeaderElement\n  };\n  useGridApiMethod(apiRef, paramsApi, 'public');\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}