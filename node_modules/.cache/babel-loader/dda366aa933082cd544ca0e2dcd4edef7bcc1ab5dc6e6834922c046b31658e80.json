{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsStateSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { EMPTY_PINNED_COLUMN_FIELDS } from './gridColumnsInterfaces';\nimport { hydrateColumnsWidth, createColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  var _props$initialState, _ref, _props$columnVisibili, _props$initialState2, _state$pinnedColumns;\n  const columnsState = createColumnsState({\n    apiRef,\n    columnsToUpsert: props.columns,\n    initialState: (_props$initialState = props.initialState) === null || _props$initialState === void 0 ? void 0 : _props$initialState.columns,\n    columnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) !== null && _props$columnVisibili !== void 0 ? _props$columnVisibili : (_props$initialState2 = props.initialState) === null || _props$initialState2 === void 0 || (_props$initialState2 = _props$initialState2.columns) === null || _props$initialState2 === void 0 ? void 0 : _props$initialState2.columnVisibilityModel) !== null && _ref !== void 0 ? _ref : {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState,\n    // In pro/premium, this part of the state is defined. We give it an empty but defined value\n    // for the community version.\n    pinnedColumns: (_state$pinnedColumns = state.pinnedColumns) !== null && _state$pinnedColumns !== void 0 ? _state$pinnedColumns : EMPTY_PINNED_COLUMN_FIELDS\n  });\n};\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\nexport function useGridColumns(apiRef, props) {\n  var _props$initialState4, _props$slotProps2;\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const previousColumnsProp = React.useRef(props.columns);\n  apiRef.current.registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    var _apiRef$current$updat, _apiRef$current;\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    (_apiRef$current$updat = (_apiRef$current = apiRef.current).updateRenderContext) === null || _apiRef$current$updat === void 0 || _apiRef$current$updat.call(_apiRef$current);\n    apiRef.current.forceUpdate();\n  }, [logger, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback(function (field) {\n    let useVisibleColumns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n    if (currentModel !== model) {\n      var _apiRef$current$updat2, _apiRef$current2;\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnsToUpsert: [],\n          initialState: undefined,\n          columnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      (_apiRef$current$updat2 = (_apiRef$current2 = apiRef.current).updateRenderContext) === null || _apiRef$current$updat2 === void 0 || _apiRef$current$updat2.call(_apiRef$current2);\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const updateColumns = React.useCallback(columns => {\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    var _columnVisibilityMode;\n    const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n    const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) !== null && _columnVisibilityMode !== void 0 ? _columnVisibilityMode : true;\n    if (isVisible !== isCurrentlyVisible) {\n      const newModel = _extends({}, columnVisibilityModel, {\n        [field]: isVisible\n      });\n      apiRef.current.setColumnVisibilityModel(newModel);\n    }\n  }, [apiRef]);\n  const getColumnIndexRelativeToVisibleColumns = React.useCallback(field => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    return allColumns.findIndex(col => col === field);\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n    logger.debug(\"Moving column \".concat(field, \" to index \").concat(targetIndexPosition));\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef.current.state), {\n      orderedFields: updatedColumns\n    }));\n    const params = {\n      column: apiRef.current.getColumn(field),\n      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnIndexChange', params);\n  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(\"Updating column \".concat(field, \" width to \").concat(width));\n    const columnsState = gridColumnsStateSelector(apiRef.current.state);\n    const column = columnsState.lookup[field];\n    const newColumn = _extends({}, column, {\n      width,\n      hasBeenResized: true\n    });\n    setGridColumnsState(hydrateColumnsWidth(_extends({}, columnsState, {\n      lookup: _extends({}, columnsState.lookup, {\n        [field]: newColumn\n      })\n    }), apiRef.current.getRootDimensions()));\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger, setGridColumnsState]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnIndexRelativeToVisibleColumns,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnWidth\n  };\n  const columnReorderApi = {\n    setColumnIndex\n  };\n  useGridApiMethod(apiRef, columnApi, 'public');\n  useGridApiMethod(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState$c, _props$initialState3;\n    const columnsStateToExport = {};\n    const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n    const shouldExportColumnVisibilityModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.columnVisibilityModel != null ||\n    // Always export if the model has been initialized\n    // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n    Object.keys((_props$initialState$c = (_props$initialState3 = props.initialState) === null || _props$initialState3 === void 0 || (_props$initialState3 = _props$initialState3.columns) === null || _props$initialState3 === void 0 ? void 0 : _props$initialState3.columnVisibilityModel) !== null && _props$initialState$c !== void 0 ? _props$initialState$c : {}).length > 0 ||\n    // Always export if the model is not empty\n    Object.keys(columnVisibilityModelToExport).length > 0;\n    if (shouldExportColumnVisibilityModel) {\n      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n    }\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, (_props$initialState4 = props.initialState) === null || _props$initialState4 === void 0 ? void 0 : _props$initialState4.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    const columnVisibilityModelToImport = (_context$stateToResto = context.stateToRestore.columns) === null || _context$stateToResto === void 0 ? void 0 : _context$stateToResto.columnVisibilityModel;\n    const initialState = context.stateToRestore.columns;\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState,\n      columnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    }\n    return params;\n  }, [apiRef]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      var _props$slotProps;\n      const ColumnsPanel = props.slots.columnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, (_props$slotProps = props.slotProps) === null || _props$slotProps === void 0 ? void 0 : _props$slotProps.columnsPanel));\n    }\n    return initialValue;\n  }, [props.slots.columnsPanel, (_props$slotProps2 = props.slotProps) === null || _props$slotProps2 === void 0 ? void 0 : _props$slotProps2.columnsPanel]);\n  const addColumnMenuItems = React.useCallback(columnMenuItems => {\n    if (props.disableColumnSelector) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuColumnsItem'];\n  }, [props.disableColumnSelector]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItems);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n\n  /*\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef.current.state), apiRef.current.getRootDimensions()));\n    }\n  };\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n\n  /**\n   * APPLIERS\n   */\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(\"Columns pipe processing have changed, regenerating the columns\");\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n\n  /*\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    logger.info(\"GridColumns have changed, new length \".concat(props.columns.length));\n    if (previousColumnsProp.current === props.columns) {\n      return;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    previousColumnsProp.current = props.columns;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}\nfunction mergeColumnsState(columnsState) {\n  return state => _extends({}, state, {\n    columns: columnsState\n  });\n}","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","gridColumnFieldsSelector","gridColumnDefinitionsSelector","gridColumnLookupSelector","gridColumnsStateSelector","gridColumnVisibilityModelSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","GridSignature","useGridApiEventHandler","useGridRegisterPipeProcessor","useGridRegisterPipeApplier","EMPTY_PINNED_COLUMN_FIELDS","hydrateColumnsWidth","createColumnsState","COLUMNS_DIMENSION_PROPERTIES","GridPreferencePanelsValue","jsx","_jsx","columnsStateInitializer","state","props","apiRef","_props$initialState","_ref","_props$columnVisibili","_props$initialState2","_state$pinnedColumns","columnsState","columnsToUpsert","columns","initialState","columnVisibilityModel","keepOnlyColumnsToUpsert","pinnedColumns","useGridColumns","_props$initialState4","_props$slotProps2","logger","previousColumnsProp","useRef","current","registerControlState","stateId","propModel","propOnChange","onColumnVisibilityModelChange","stateSelector","changeEvent","setGridColumnsState","useCallback","_apiRef$current$updat","_apiRef$current","debug","setState","mergeColumnsState","publishEvent","orderedFields","updateRenderContext","call","forceUpdate","getColumn","field","getAllColumns","getVisibleColumns","getColumnIndex","useVisibleColumns","arguments","length","undefined","findIndex","col","getColumnPosition","index","setColumnVisibilityModel","model","currentModel","_apiRef$current$updat2","_apiRef$current2","updateColumns","setColumnVisibility","isVisible","_columnVisibilityMode","isCurrentlyVisible","newModel","getColumnIndexRelativeToVisibleColumns","allColumns","setColumnIndex","targetIndexPosition","oldIndexPosition","concat","updatedColumns","fieldRemoved","splice","params","column","targetIndex","oldIndex","setColumnWidth","width","lookup","newColumn","hasBeenResized","getRootDimensions","element","getColumnHeaderElement","colDef","columnApi","columnReorderApi","signature","DataGrid","stateExportPreProcessing","prevState","context","_props$initialState$c","_props$initialState3","columnsStateToExport","columnVisibilityModelToExport","shouldExportColumnVisibilityModel","exportOnlyDirtyModels","Object","keys","dimensions","forEach","colDefDimensions","propertyName","propertyValue","Infinity","stateRestorePreProcessing","_context$stateToResto","columnVisibilityModelToImport","stateToRestore","preferencePanelPreProcessing","initialValue","value","_props$slotProps","ColumnsPanel","slots","columnsPanel","slotProps","addColumnMenuItems","columnMenuItems","disableColumnSelector","prevInnerWidth","handleGridSizeChange","viewportInnerSize","hydrateColumns","info","isFirstRender","useEffect"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsStateSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { EMPTY_PINNED_COLUMN_FIELDS } from './gridColumnsInterfaces';\nimport { hydrateColumnsWidth, createColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  const columnsState = createColumnsState({\n    apiRef,\n    columnsToUpsert: props.columns,\n    initialState: props.initialState?.columns,\n    columnVisibilityModel: props.columnVisibilityModel ?? props.initialState?.columns?.columnVisibilityModel ?? {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState,\n    // In pro/premium, this part of the state is defined. We give it an empty but defined value\n    // for the community version.\n    pinnedColumns: state.pinnedColumns ?? EMPTY_PINNED_COLUMN_FIELDS\n  });\n};\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\nexport function useGridColumns(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const previousColumnsProp = React.useRef(props.columns);\n  apiRef.current.registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    apiRef.current.updateRenderContext?.();\n    apiRef.current.forceUpdate();\n  }, [logger, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback((field, useVisibleColumns = true) => {\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnsToUpsert: [],\n          initialState: undefined,\n          columnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.updateRenderContext?.();\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef]);\n  const updateColumns = React.useCallback(columns => {\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n    const isCurrentlyVisible = columnVisibilityModel[field] ?? true;\n    if (isVisible !== isCurrentlyVisible) {\n      const newModel = _extends({}, columnVisibilityModel, {\n        [field]: isVisible\n      });\n      apiRef.current.setColumnVisibilityModel(newModel);\n    }\n  }, [apiRef]);\n  const getColumnIndexRelativeToVisibleColumns = React.useCallback(field => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    return allColumns.findIndex(col => col === field);\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef.current.state), {\n      orderedFields: updatedColumns\n    }));\n    const params = {\n      column: apiRef.current.getColumn(field),\n      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnIndexChange', params);\n  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const columnsState = gridColumnsStateSelector(apiRef.current.state);\n    const column = columnsState.lookup[field];\n    const newColumn = _extends({}, column, {\n      width,\n      hasBeenResized: true\n    });\n    setGridColumnsState(hydrateColumnsWidth(_extends({}, columnsState, {\n      lookup: _extends({}, columnsState.lookup, {\n        [field]: newColumn\n      })\n    }), apiRef.current.getRootDimensions()));\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger, setGridColumnsState]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnIndexRelativeToVisibleColumns,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnWidth\n  };\n  const columnReorderApi = {\n    setColumnIndex\n  };\n  useGridApiMethod(apiRef, columnApi, 'public');\n  useGridApiMethod(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const columnsStateToExport = {};\n    const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n    const shouldExportColumnVisibilityModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.columnVisibilityModel != null ||\n    // Always export if the model has been initialized\n    // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n    Object.keys(props.initialState?.columns?.columnVisibilityModel ?? {}).length > 0 ||\n    // Always export if the model is not empty\n    Object.keys(columnVisibilityModelToExport).length > 0;\n    if (shouldExportColumnVisibilityModel) {\n      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n    }\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, props.initialState?.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const columnVisibilityModelToImport = context.stateToRestore.columns?.columnVisibilityModel;\n    const initialState = context.stateToRestore.columns;\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState,\n      columnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    }\n    return params;\n  }, [apiRef]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      const ColumnsPanel = props.slots.columnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, props.slotProps?.columnsPanel));\n    }\n    return initialValue;\n  }, [props.slots.columnsPanel, props.slotProps?.columnsPanel]);\n  const addColumnMenuItems = React.useCallback(columnMenuItems => {\n    if (props.disableColumnSelector) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuColumnsItem'];\n  }, [props.disableColumnSelector]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItems);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n\n  /*\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef.current.state), apiRef.current.getRootDimensions()));\n    }\n  };\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n\n  /**\n   * APPLIERS\n   */\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n\n  /*\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n    if (previousColumnsProp.current === props.columns) {\n      return;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    previousColumnsProp.current = props.columns;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}\nfunction mergeColumnsState(columnsState) {\n  return state => _extends({}, state, {\n    columns: columnsState\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}