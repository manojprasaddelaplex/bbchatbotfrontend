{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"rowHeight\", \"className\", \"visibleColumns\", \"pinnedColumns\", \"offsetTop\", \"offsetLeft\", \"dimensions\", \"renderContext\", \"focusedColumnIndex\", \"isFirstVisible\", \"isLastVisible\", \"isNotVisible\", \"showBottomBorder\", \"focusedCell\", \"tabbableCell\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\", \"onMouseOut\", \"onMouseOver\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { fastMemo } from '@mui/x-internals/fastMemo';\nimport { GridEditModes, GridRowModes, GridCellModes } from '../models/gridEditRowModel';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { gridClasses } from '../constants/gridClasses';\nimport { composeGridClasses } from '../utils/composeGridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridColumnPositionsSelector } from '../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector, objectShallowCompare } from '../hooks/utils/useGridSelector';\nimport { useGridVisibleRows } from '../hooks/utils/useGridVisibleRows';\nimport { findParentElementFromClassName, isEventTargetInPortal } from '../utils/domUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../colDef/gridCheckboxSelectionColDef';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../colDef/gridActionsColDef';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../constants/gridDetailPanelToggleField';\nimport { gridSortModelSelector } from '../hooks/features/sorting/gridSortingSelector';\nimport { gridRowMaximumTreeDepthSelector } from '../hooks/features/rows/gridRowsSelector';\nimport { gridEditRowsStateSelector } from '../hooks/features/editing/gridEditingSelectors';\nimport { PinnedPosition, gridPinnedColumnPositionLookup } from './cell/GridCell';\nimport { GridScrollbarFillerCell as ScrollbarFiller } from './GridScrollbarFillerCell';\nimport { getPinnedCellOffset } from '../internals/utils/getPinnedCellOffset';\nimport { useGridConfiguration } from '../hooks/utils/useGridConfiguration';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction EmptyCell(_ref) {\n  let {\n    width\n  } = _ref;\n  if (!width) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(\"div\", {\n    role: \"presentation\",\n    className: clsx(gridClasses.cell, gridClasses.cellEmpty),\n    style: {\n      '--width': \"\".concat(width, \"px\")\n    }\n  });\n}\nconst GridRow = /*#__PURE__*/React.forwardRef(function GridRow(props, refProp) {\n  const {\n      selected,\n      rowId,\n      row,\n      index,\n      style: styleProp,\n      rowHeight,\n      className,\n      visibleColumns,\n      pinnedColumns,\n      offsetLeft,\n      dimensions,\n      renderContext,\n      focusedColumnIndex,\n      isFirstVisible,\n      isLastVisible,\n      isNotVisible,\n      showBottomBorder,\n      onClick,\n      onDoubleClick,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseOut,\n      onMouseOver\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const configuration = useGridConfiguration();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const handleRef = useForkRef(ref, refProp);\n  const rowNode = apiRef.current.getRowNode(rowId);\n  const scrollbarWidth = dimensions.hasScrollY ? dimensions.scrollbarSize : 0;\n  const gridHasFiller = dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width;\n  const editing = apiRef.current.getRowMode(rowId) === GridRowModes.Edit;\n  const editable = rootProps.editMode === GridEditModes.Row;\n  const hasFocusCell = focusedColumnIndex !== undefined;\n  const hasVirtualFocusCellLeft = hasFocusCell && focusedColumnIndex >= pinnedColumns.left.length && focusedColumnIndex < renderContext.firstColumnIndex;\n  const hasVirtualFocusCellRight = hasFocusCell && focusedColumnIndex < visibleColumns.length - pinnedColumns.right.length && focusedColumnIndex >= renderContext.lastColumnIndex;\n  const classes = composeGridClasses(rootProps.classes, {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isFirstVisible && 'row--firstVisible', isLastVisible && 'row--lastVisible', showBottomBorder && 'row--borderBottom', rowHeight === 'auto' && 'row--dynamicHeight']\n  });\n  const getRowAriaAttributes = configuration.hooks.useGridRowAriaAttributes();\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      // The index prop is relative to the rows from all pages. As example, the index prop of the\n      // first row is 5 if `paginationModel.pageSize=5` and `paginationModel.page=1`. However, the index used by the virtualization\n      // doesn't care about pagination and considers the rows from the current page only, so the\n      // first row always has index=0. We need to subtract the index of the first row to make it\n      // compatible with the index used by the virtualization.\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n      // pinned rows are not part of the visible rows\n      if (rowIndex != null) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n    const rootElement = ref.current;\n    const hasFixedHeight = rowHeight !== 'auto';\n    if (!rootElement || hasFixedHeight || typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n    const resizeObserver = new ResizeObserver(entries => {\n      const [entry] = entries;\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height);\n    });\n    resizeObserver.observe(rootElement);\n    return () => resizeObserver.disconnect();\n  }, [apiRef, currentPage.range, index, rowHeight, rowId]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell === null || cell === void 0 ? void 0 : cell.getAttribute('data-field');\n\n    // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      }\n\n      // User opened a detail panel\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      }\n\n      // User reorders a row\n      if (field === '__reorder__') {\n        return;\n      }\n\n      // User is editing a cell\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      }\n\n      // User clicked a button from the \"actions\" column type\n      const column = apiRef.current.getColumn(field);\n      if ((column === null || column === void 0 ? void 0 : column.type) === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const {\n    slots,\n    slotProps,\n    disableColumnReorder\n  } = rootProps;\n  const rowReordering = rootProps.rowReordering;\n  const sizes = useGridSelector(apiRef, () => _extends({}, apiRef.current.unstable_getRowInternalSizes(rowId)), objectShallowCompare);\n  let minHeight = rowHeight;\n  if (minHeight === 'auto' && sizes) {\n    var _sizes$baseCenter;\n    const numberOfBaseSizes = 1;\n    const maximumSize = (_sizes$baseCenter = sizes.baseCenter) !== null && _sizes$baseCenter !== void 0 ? _sizes$baseCenter : 0;\n    if (maximumSize > 0 && numberOfBaseSizes > 1) {\n      minHeight = maximumSize;\n    }\n  }\n  const style = React.useMemo(() => {\n    if (isNotVisible) {\n      return {\n        opacity: 0,\n        width: 0,\n        height: 0\n      };\n    }\n    const rowStyle = _extends({}, styleProp, {\n      maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n      // max-height doesn't support \"auto\"\n      minHeight,\n      '--height': typeof rowHeight === 'number' ? \"\".concat(rowHeight, \"px\") : rowHeight\n    });\n    if (sizes !== null && sizes !== void 0 && sizes.spacingTop) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n      rowStyle[property] = sizes.spacingTop;\n    }\n    if (sizes !== null && sizes !== void 0 && sizes.spacingBottom) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n      let propertyValue = rowStyle[property];\n      // avoid overriding existing value\n      if (typeof propertyValue !== 'number') {\n        propertyValue = parseInt(propertyValue || '0', 10);\n      }\n      propertyValue += sizes.spacingBottom;\n      rowStyle[property] = propertyValue;\n    }\n    return rowStyle;\n  }, [isNotVisible, rowHeight, styleProp, minHeight, sizes, rootProps.rowSpacingType]);\n  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);\n  const ariaAttributes = rowNode ? getRowAriaAttributes(rowNode, index) : undefined;\n  if (typeof rootProps.getRowClassName === 'function') {\n    var _currentPage$range;\n    const indexRelativeToCurrentPage = index - (((_currentPage$range = currentPage.range) === null || _currentPage$range === void 0 ? void 0 : _currentPage$range.firstRowIndex) || 0);\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n    rowClassNames.push(rootProps.getRowClassName(rowParams));\n  }\n  const getCell = function (column, indexInSection, indexRelativeToAllColumns, sectionLength) {\n    var _cellColSpanInfo$cell, _cellColSpanInfo$cell2, _editRowsState$rowId$, _editRowsState$rowId;\n    let pinnedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : PinnedPosition.NONE;\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n    if (cellColSpanInfo !== null && cellColSpanInfo !== void 0 && cellColSpanInfo.spannedByColSpan) {\n      return null;\n    }\n    const width = (_cellColSpanInfo$cell = cellColSpanInfo === null || cellColSpanInfo === void 0 ? void 0 : cellColSpanInfo.cellProps.width) !== null && _cellColSpanInfo$cell !== void 0 ? _cellColSpanInfo$cell : column.computedWidth;\n    const colSpan = (_cellColSpanInfo$cell2 = cellColSpanInfo === null || cellColSpanInfo === void 0 ? void 0 : cellColSpanInfo.cellProps.colSpan) !== null && _cellColSpanInfo$cell2 !== void 0 ? _cellColSpanInfo$cell2 : 1;\n    const pinnedOffset = getPinnedCellOffset(gridPinnedColumnPositionLookup[pinnedPosition], column.computedWidth, indexRelativeToAllColumns, columnPositions, dimensions);\n    if ((rowNode === null || rowNode === void 0 ? void 0 : rowNode.type) === 'skeletonRow') {\n      return /*#__PURE__*/_jsx(slots.skeletonCell, {\n        type: column.type,\n        width: width,\n        height: rowHeight,\n        field: column.field,\n        align: column.align\n      }, column.field);\n    }\n    const editCellState = (_editRowsState$rowId$ = (_editRowsState$rowId = editRowsState[rowId]) === null || _editRowsState$rowId === void 0 ? void 0 : _editRowsState$rowId[column.field]) !== null && _editRowsState$rowId$ !== void 0 ? _editRowsState$rowId$ : null;\n\n    // when the cell is a reorder cell we are not allowing to reorder the col\n    // fixes https://github.com/mui/mui-x/issues/11126\n    const isReorderCell = column.field === '__reorder__';\n    const isEditingRows = Object.keys(editRowsState).length > 0;\n    const canReorderColumn = !(disableColumnReorder || column.disableReorder);\n    const canReorderRow = rowReordering && !sortModel.length && treeDepth <= 1 && !isEditingRows;\n    const disableDragEvents = !(canReorderColumn || isReorderCell && canReorderRow);\n    const cellIsNotVisible = pinnedPosition === PinnedPosition.VIRTUAL;\n    return /*#__PURE__*/_jsx(slots.cell, _extends({\n      column: column,\n      width: width,\n      rowId: rowId,\n      align: column.align || 'left',\n      colIndex: indexRelativeToAllColumns,\n      colSpan: colSpan,\n      disableDragEvents: disableDragEvents,\n      editCellState: editCellState,\n      isNotVisible: cellIsNotVisible,\n      pinnedOffset: pinnedOffset,\n      pinnedPosition: pinnedPosition,\n      sectionIndex: indexInSection,\n      sectionLength: sectionLength,\n      gridHasFiller: gridHasFiller\n    }, slotProps === null || slotProps === void 0 ? void 0 : slotProps.cell), column.field);\n  };\n\n  /* Start of rendering */\n\n  if (!rowNode) {\n    return null;\n  }\n  const leftCells = pinnedColumns.left.map((column, i) => {\n    const indexRelativeToAllColumns = i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.left.length, PinnedPosition.LEFT);\n  });\n  const rightCells = pinnedColumns.right.map((column, i) => {\n    const indexRelativeToAllColumns = visibleColumns.length - pinnedColumns.right.length + i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.right.length, PinnedPosition.RIGHT);\n  });\n  const middleColumnsLength = visibleColumns.length - pinnedColumns.left.length - pinnedColumns.right.length;\n  const cells = [];\n  if (hasVirtualFocusCellLeft) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedPosition.VIRTUAL));\n  }\n  for (let i = renderContext.firstColumnIndex; i < renderContext.lastColumnIndex; i += 1) {\n    const column = visibleColumns[i];\n    const indexInSection = i - pinnedColumns.left.length;\n    cells.push(getCell(column, indexInSection, i, middleColumnsLength));\n  }\n  if (hasVirtualFocusCellRight) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedPosition.VIRTUAL));\n  }\n  const eventHandlers = row ? {\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave),\n    onMouseOut: publish('rowMouseOut', onMouseOut),\n    onMouseOver: publish('rowMouseOver', onMouseOver)\n  } : null;\n  const expandedWidth = dimensions.viewportOuterSize.width - dimensions.columnsTotalWidth - scrollbarWidth;\n  const emptyCellWidth = Math.max(0, expandedWidth);\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    ref: handleRef,\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(...rowClassNames, classes.root, className),\n    style: style\n  }, ariaAttributes, eventHandlers, other, {\n    children: [leftCells, /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: gridClasses.cellOffsetLeft,\n      style: {\n        width: offsetLeft\n      }\n    }), cells, emptyCellWidth > 0 && /*#__PURE__*/_jsx(EmptyCell, {\n      width: emptyCellWidth\n    }), rightCells.length > 0 && /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: gridClasses.filler\n    }), rightCells, scrollbarWidth !== 0 && /*#__PURE__*/_jsx(ScrollbarFiller, {\n      pinnedRight: pinnedColumns.right.length > 0\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  dimensions: PropTypes.shape({\n    bottomContainerHeight: PropTypes.number.isRequired,\n    columnsTotalWidth: PropTypes.number.isRequired,\n    contentSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    hasScrollX: PropTypes.bool.isRequired,\n    hasScrollY: PropTypes.bool.isRequired,\n    headerFilterHeight: PropTypes.number.isRequired,\n    headerHeight: PropTypes.number.isRequired,\n    headersTotalHeight: PropTypes.number.isRequired,\n    isReady: PropTypes.bool.isRequired,\n    leftPinnedWidth: PropTypes.number.isRequired,\n    minimumSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    rightPinnedWidth: PropTypes.number.isRequired,\n    root: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    rowHeight: PropTypes.number.isRequired,\n    rowWidth: PropTypes.number.isRequired,\n    scrollbarSize: PropTypes.number.isRequired,\n    topContainerHeight: PropTypes.number.isRequired,\n    viewportInnerSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    viewportOuterSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired\n  }).isRequired,\n  /**\n   * Determines which cell has focus.\n   * If `null`, no cell in this row has focus.\n   */\n  focusedColumnIndex: PropTypes.number,\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number.isRequired,\n  isFirstVisible: PropTypes.bool.isRequired,\n  isLastVisible: PropTypes.bool.isRequired,\n  isNotVisible: PropTypes.bool.isRequired,\n  offsetLeft: PropTypes.number.isRequired,\n  offsetTop: PropTypes.number,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  pinnedColumns: PropTypes.object.isRequired,\n  renderContext: PropTypes.shape({\n    firstColumnIndex: PropTypes.number.isRequired,\n    firstRowIndex: PropTypes.number.isRequired,\n    lastColumnIndex: PropTypes.number.isRequired,\n    lastRowIndex: PropTypes.number.isRequired\n  }).isRequired,\n  row: PropTypes.object.isRequired,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  selected: PropTypes.bool.isRequired,\n  showBottomBorder: PropTypes.bool.isRequired,\n  /**\n   * Determines which cell should be tabbable by having tabIndex=0.\n   * If `null`, no cell in this row is in the tab sequence.\n   */\n  tabbableCell: PropTypes.string,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired\n} : void 0;\nconst MemoizedGridRow = fastMemo(GridRow);\nexport { MemoizedGridRow as GridRow };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_useForkRef","useForkRef","fastMemo","GridEditModes","GridRowModes","GridCellModes","useGridApiContext","gridClasses","composeGridClasses","useGridRootProps","gridColumnPositionsSelector","useGridSelector","objectShallowCompare","useGridVisibleRows","findParentElementFromClassName","isEventTargetInPortal","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridSortModelSelector","gridRowMaximumTreeDepthSelector","gridEditRowsStateSelector","PinnedPosition","gridPinnedColumnPositionLookup","GridScrollbarFillerCell","ScrollbarFiller","getPinnedCellOffset","useGridConfiguration","jsx","_jsx","jsxs","_jsxs","EmptyCell","_ref","width","role","className","cell","cellEmpty","style","concat","GridRow","forwardRef","props","refProp","selected","rowId","row","index","styleProp","rowHeight","visibleColumns","pinnedColumns","offsetLeft","dimensions","renderContext","focusedColumnIndex","isFirstVisible","isLastVisible","isNotVisible","showBottomBorder","onClick","onDoubleClick","onMouseEnter","onMouseLeave","onMouseOut","onMouseOver","other","apiRef","configuration","ref","useRef","rootProps","currentPage","sortModel","treeDepth","columnPositions","editRowsState","handleRef","rowNode","current","getRowNode","scrollbarWidth","hasScrollY","scrollbarSize","gridHasFiller","columnsTotalWidth","viewportOuterSize","editing","getRowMode","Edit","editable","editMode","Row","hasFocusCell","undefined","hasVirtualFocusCellLeft","left","length","firstColumnIndex","hasVirtualFocusCellRight","right","lastColumnIndex","classes","root","getRowAriaAttributes","hooks","useGridRowAriaAttributes","useLayoutEffect","range","rowIndex","getRowIndexRelativeToVisibleRows","unstable_setLastMeasuredRowIndex","rootElement","hasFixedHeight","ResizeObserver","resizeObserver","entries","entry","height","borderBoxSize","blockSize","contentRect","unstable_storeRowHeightMeasurement","observe","disconnect","publish","useCallback","eventName","propHandler","event","getRow","publishEvent","getRowParams","publishClick","target","field","getAttribute","getCellMode","column","getColumn","type","slots","slotProps","disableColumnReorder","rowReordering","sizes","unstable_getRowInternalSizes","minHeight","_sizes$baseCenter","numberOfBaseSizes","maximumSize","baseCenter","useMemo","opacity","rowStyle","maxHeight","spacingTop","property","rowSpacingType","spacingBottom","propertyValue","parseInt","rowClassNames","unstable_applyPipeProcessors","ariaAttributes","getRowClassName","_currentPage$range","indexRelativeToCurrentPage","firstRowIndex","rowParams","rows","push","getCell","indexInSection","indexRelativeToAllColumns","sectionLength","_cellColSpanInfo$cell","_cellColSpanInfo$cell2","_editRowsState$rowId$","_editRowsState$rowId","pinnedPosition","arguments","NONE","cellColSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","cellProps","computedWidth","colSpan","pinnedOffset","skeletonCell","align","editCellState","isReorderCell","isEditingRows","Object","keys","canReorderColumn","disableReorder","canReorderRow","disableDragEvents","cellIsNotVisible","VIRTUAL","colIndex","sectionIndex","leftCells","map","i","LEFT","rightCells","RIGHT","middleColumnsLength","cells","eventHandlers","expandedWidth","emptyCellWidth","Math","max","children","cellOffsetLeft","filler","pinnedRight","process","env","NODE_ENV","propTypes","shape","bottomContainerHeight","number","isRequired","contentSize","hasScrollX","bool","headerFilterHeight","headerHeight","headersTotalHeight","isReady","leftPinnedWidth","minimumSize","rightPinnedWidth","rowWidth","topContainerHeight","viewportInnerSize","offsetTop","func","object","lastRowIndex","oneOfType","oneOf","string","tabbableCell","arrayOf","MemoizedGridRow"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/node_modules/@mui/x-data-grid/components/GridRow.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"rowHeight\", \"className\", \"visibleColumns\", \"pinnedColumns\", \"offsetTop\", \"offsetLeft\", \"dimensions\", \"renderContext\", \"focusedColumnIndex\", \"isFirstVisible\", \"isLastVisible\", \"isNotVisible\", \"showBottomBorder\", \"focusedCell\", \"tabbableCell\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\", \"onMouseOut\", \"onMouseOver\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { fastMemo } from '@mui/x-internals/fastMemo';\nimport { GridEditModes, GridRowModes, GridCellModes } from '../models/gridEditRowModel';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { gridClasses } from '../constants/gridClasses';\nimport { composeGridClasses } from '../utils/composeGridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridColumnPositionsSelector } from '../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector, objectShallowCompare } from '../hooks/utils/useGridSelector';\nimport { useGridVisibleRows } from '../hooks/utils/useGridVisibleRows';\nimport { findParentElementFromClassName, isEventTargetInPortal } from '../utils/domUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../colDef/gridCheckboxSelectionColDef';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../colDef/gridActionsColDef';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../constants/gridDetailPanelToggleField';\nimport { gridSortModelSelector } from '../hooks/features/sorting/gridSortingSelector';\nimport { gridRowMaximumTreeDepthSelector } from '../hooks/features/rows/gridRowsSelector';\nimport { gridEditRowsStateSelector } from '../hooks/features/editing/gridEditingSelectors';\nimport { PinnedPosition, gridPinnedColumnPositionLookup } from './cell/GridCell';\nimport { GridScrollbarFillerCell as ScrollbarFiller } from './GridScrollbarFillerCell';\nimport { getPinnedCellOffset } from '../internals/utils/getPinnedCellOffset';\nimport { useGridConfiguration } from '../hooks/utils/useGridConfiguration';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction EmptyCell({\n  width\n}) {\n  if (!width) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(\"div\", {\n    role: \"presentation\",\n    className: clsx(gridClasses.cell, gridClasses.cellEmpty),\n    style: {\n      '--width': `${width}px`\n    }\n  });\n}\nconst GridRow = /*#__PURE__*/React.forwardRef(function GridRow(props, refProp) {\n  const {\n      selected,\n      rowId,\n      row,\n      index,\n      style: styleProp,\n      rowHeight,\n      className,\n      visibleColumns,\n      pinnedColumns,\n      offsetLeft,\n      dimensions,\n      renderContext,\n      focusedColumnIndex,\n      isFirstVisible,\n      isLastVisible,\n      isNotVisible,\n      showBottomBorder,\n      onClick,\n      onDoubleClick,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseOut,\n      onMouseOver\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const configuration = useGridConfiguration();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const handleRef = useForkRef(ref, refProp);\n  const rowNode = apiRef.current.getRowNode(rowId);\n  const scrollbarWidth = dimensions.hasScrollY ? dimensions.scrollbarSize : 0;\n  const gridHasFiller = dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width;\n  const editing = apiRef.current.getRowMode(rowId) === GridRowModes.Edit;\n  const editable = rootProps.editMode === GridEditModes.Row;\n  const hasFocusCell = focusedColumnIndex !== undefined;\n  const hasVirtualFocusCellLeft = hasFocusCell && focusedColumnIndex >= pinnedColumns.left.length && focusedColumnIndex < renderContext.firstColumnIndex;\n  const hasVirtualFocusCellRight = hasFocusCell && focusedColumnIndex < visibleColumns.length - pinnedColumns.right.length && focusedColumnIndex >= renderContext.lastColumnIndex;\n  const classes = composeGridClasses(rootProps.classes, {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isFirstVisible && 'row--firstVisible', isLastVisible && 'row--lastVisible', showBottomBorder && 'row--borderBottom', rowHeight === 'auto' && 'row--dynamicHeight']\n  });\n  const getRowAriaAttributes = configuration.hooks.useGridRowAriaAttributes();\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      // The index prop is relative to the rows from all pages. As example, the index prop of the\n      // first row is 5 if `paginationModel.pageSize=5` and `paginationModel.page=1`. However, the index used by the virtualization\n      // doesn't care about pagination and considers the rows from the current page only, so the\n      // first row always has index=0. We need to subtract the index of the first row to make it\n      // compatible with the index used by the virtualization.\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n      // pinned rows are not part of the visible rows\n      if (rowIndex != null) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n    const rootElement = ref.current;\n    const hasFixedHeight = rowHeight !== 'auto';\n    if (!rootElement || hasFixedHeight || typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n    const resizeObserver = new ResizeObserver(entries => {\n      const [entry] = entries;\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height);\n    });\n    resizeObserver.observe(rootElement);\n    return () => resizeObserver.disconnect();\n  }, [apiRef, currentPage.range, index, rowHeight, rowId]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell?.getAttribute('data-field');\n\n    // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      }\n\n      // User opened a detail panel\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      }\n\n      // User reorders a row\n      if (field === '__reorder__') {\n        return;\n      }\n\n      // User is editing a cell\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      }\n\n      // User clicked a button from the \"actions\" column type\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const {\n    slots,\n    slotProps,\n    disableColumnReorder\n  } = rootProps;\n  const rowReordering = rootProps.rowReordering;\n  const sizes = useGridSelector(apiRef, () => _extends({}, apiRef.current.unstable_getRowInternalSizes(rowId)), objectShallowCompare);\n  let minHeight = rowHeight;\n  if (minHeight === 'auto' && sizes) {\n    const numberOfBaseSizes = 1;\n    const maximumSize = sizes.baseCenter ?? 0;\n    if (maximumSize > 0 && numberOfBaseSizes > 1) {\n      minHeight = maximumSize;\n    }\n  }\n  const style = React.useMemo(() => {\n    if (isNotVisible) {\n      return {\n        opacity: 0,\n        width: 0,\n        height: 0\n      };\n    }\n    const rowStyle = _extends({}, styleProp, {\n      maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n      // max-height doesn't support \"auto\"\n      minHeight,\n      '--height': typeof rowHeight === 'number' ? `${rowHeight}px` : rowHeight\n    });\n    if (sizes?.spacingTop) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n      rowStyle[property] = sizes.spacingTop;\n    }\n    if (sizes?.spacingBottom) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n      let propertyValue = rowStyle[property];\n      // avoid overriding existing value\n      if (typeof propertyValue !== 'number') {\n        propertyValue = parseInt(propertyValue || '0', 10);\n      }\n      propertyValue += sizes.spacingBottom;\n      rowStyle[property] = propertyValue;\n    }\n    return rowStyle;\n  }, [isNotVisible, rowHeight, styleProp, minHeight, sizes, rootProps.rowSpacingType]);\n  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);\n  const ariaAttributes = rowNode ? getRowAriaAttributes(rowNode, index) : undefined;\n  if (typeof rootProps.getRowClassName === 'function') {\n    const indexRelativeToCurrentPage = index - (currentPage.range?.firstRowIndex || 0);\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n    rowClassNames.push(rootProps.getRowClassName(rowParams));\n  }\n  const getCell = (column, indexInSection, indexRelativeToAllColumns, sectionLength, pinnedPosition = PinnedPosition.NONE) => {\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n    if (cellColSpanInfo?.spannedByColSpan) {\n      return null;\n    }\n    const width = cellColSpanInfo?.cellProps.width ?? column.computedWidth;\n    const colSpan = cellColSpanInfo?.cellProps.colSpan ?? 1;\n    const pinnedOffset = getPinnedCellOffset(gridPinnedColumnPositionLookup[pinnedPosition], column.computedWidth, indexRelativeToAllColumns, columnPositions, dimensions);\n    if (rowNode?.type === 'skeletonRow') {\n      return /*#__PURE__*/_jsx(slots.skeletonCell, {\n        type: column.type,\n        width: width,\n        height: rowHeight,\n        field: column.field,\n        align: column.align\n      }, column.field);\n    }\n    const editCellState = editRowsState[rowId]?.[column.field] ?? null;\n\n    // when the cell is a reorder cell we are not allowing to reorder the col\n    // fixes https://github.com/mui/mui-x/issues/11126\n    const isReorderCell = column.field === '__reorder__';\n    const isEditingRows = Object.keys(editRowsState).length > 0;\n    const canReorderColumn = !(disableColumnReorder || column.disableReorder);\n    const canReorderRow = rowReordering && !sortModel.length && treeDepth <= 1 && !isEditingRows;\n    const disableDragEvents = !(canReorderColumn || isReorderCell && canReorderRow);\n    const cellIsNotVisible = pinnedPosition === PinnedPosition.VIRTUAL;\n    return /*#__PURE__*/_jsx(slots.cell, _extends({\n      column: column,\n      width: width,\n      rowId: rowId,\n      align: column.align || 'left',\n      colIndex: indexRelativeToAllColumns,\n      colSpan: colSpan,\n      disableDragEvents: disableDragEvents,\n      editCellState: editCellState,\n      isNotVisible: cellIsNotVisible,\n      pinnedOffset: pinnedOffset,\n      pinnedPosition: pinnedPosition,\n      sectionIndex: indexInSection,\n      sectionLength: sectionLength,\n      gridHasFiller: gridHasFiller\n    }, slotProps?.cell), column.field);\n  };\n\n  /* Start of rendering */\n\n  if (!rowNode) {\n    return null;\n  }\n  const leftCells = pinnedColumns.left.map((column, i) => {\n    const indexRelativeToAllColumns = i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.left.length, PinnedPosition.LEFT);\n  });\n  const rightCells = pinnedColumns.right.map((column, i) => {\n    const indexRelativeToAllColumns = visibleColumns.length - pinnedColumns.right.length + i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.right.length, PinnedPosition.RIGHT);\n  });\n  const middleColumnsLength = visibleColumns.length - pinnedColumns.left.length - pinnedColumns.right.length;\n  const cells = [];\n  if (hasVirtualFocusCellLeft) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedPosition.VIRTUAL));\n  }\n  for (let i = renderContext.firstColumnIndex; i < renderContext.lastColumnIndex; i += 1) {\n    const column = visibleColumns[i];\n    const indexInSection = i - pinnedColumns.left.length;\n    cells.push(getCell(column, indexInSection, i, middleColumnsLength));\n  }\n  if (hasVirtualFocusCellRight) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedPosition.VIRTUAL));\n  }\n  const eventHandlers = row ? {\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave),\n    onMouseOut: publish('rowMouseOut', onMouseOut),\n    onMouseOver: publish('rowMouseOver', onMouseOver)\n  } : null;\n  const expandedWidth = dimensions.viewportOuterSize.width - dimensions.columnsTotalWidth - scrollbarWidth;\n  const emptyCellWidth = Math.max(0, expandedWidth);\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    ref: handleRef,\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(...rowClassNames, classes.root, className),\n    style: style\n  }, ariaAttributes, eventHandlers, other, {\n    children: [leftCells, /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: gridClasses.cellOffsetLeft,\n      style: {\n        width: offsetLeft\n      }\n    }), cells, emptyCellWidth > 0 && /*#__PURE__*/_jsx(EmptyCell, {\n      width: emptyCellWidth\n    }), rightCells.length > 0 && /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: gridClasses.filler\n    }), rightCells, scrollbarWidth !== 0 && /*#__PURE__*/_jsx(ScrollbarFiller, {\n      pinnedRight: pinnedColumns.right.length > 0\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  dimensions: PropTypes.shape({\n    bottomContainerHeight: PropTypes.number.isRequired,\n    columnsTotalWidth: PropTypes.number.isRequired,\n    contentSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    hasScrollX: PropTypes.bool.isRequired,\n    hasScrollY: PropTypes.bool.isRequired,\n    headerFilterHeight: PropTypes.number.isRequired,\n    headerHeight: PropTypes.number.isRequired,\n    headersTotalHeight: PropTypes.number.isRequired,\n    isReady: PropTypes.bool.isRequired,\n    leftPinnedWidth: PropTypes.number.isRequired,\n    minimumSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    rightPinnedWidth: PropTypes.number.isRequired,\n    root: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    rowHeight: PropTypes.number.isRequired,\n    rowWidth: PropTypes.number.isRequired,\n    scrollbarSize: PropTypes.number.isRequired,\n    topContainerHeight: PropTypes.number.isRequired,\n    viewportInnerSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    viewportOuterSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired\n  }).isRequired,\n  /**\n   * Determines which cell has focus.\n   * If `null`, no cell in this row has focus.\n   */\n  focusedColumnIndex: PropTypes.number,\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number.isRequired,\n  isFirstVisible: PropTypes.bool.isRequired,\n  isLastVisible: PropTypes.bool.isRequired,\n  isNotVisible: PropTypes.bool.isRequired,\n  offsetLeft: PropTypes.number.isRequired,\n  offsetTop: PropTypes.number,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  pinnedColumns: PropTypes.object.isRequired,\n  renderContext: PropTypes.shape({\n    firstColumnIndex: PropTypes.number.isRequired,\n    firstRowIndex: PropTypes.number.isRequired,\n    lastColumnIndex: PropTypes.number.isRequired,\n    lastRowIndex: PropTypes.number.isRequired\n  }).isRequired,\n  row: PropTypes.object.isRequired,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  selected: PropTypes.bool.isRequired,\n  showBottomBorder: PropTypes.bool.isRequired,\n  /**\n   * Determines which cell should be tabbable by having tabIndex=0.\n   * If `null`, no cell in this row is in the tab sequence.\n   */\n  tabbableCell: PropTypes.string,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired\n} : void 0;\nconst MemoizedGridRow = fastMemo(GridRow);\nexport { MemoizedGridRow as GridRow };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}