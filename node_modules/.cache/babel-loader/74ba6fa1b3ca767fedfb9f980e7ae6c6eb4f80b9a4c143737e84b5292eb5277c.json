{"ast":null,"code":"import * as React from 'react';\nimport { fastObjectShallowCompare } from '@mui/x-internals/fastObjectShallowCompare';\nimport { useLazyRef } from './useLazyRef';\nimport { useOnMount } from './useOnMount';\nimport { warnOnce } from '../../internals/utils/warning';\nfunction isOutputSelector(selector) {\n  return selector.acceptsApiRef;\n}\nfunction applySelector(apiRef, selector) {\n  if (isOutputSelector(selector)) {\n    return selector(apiRef);\n  }\n  return selector(apiRef.current.state);\n}\nconst defaultCompare = Object.is;\nexport const objectShallowCompare = fastObjectShallowCompare;\nconst createRefs = () => ({\n  state: null,\n  equals: null,\n  selector: null\n});\nexport const useGridSelector = (apiRef, selector, equals = defaultCompare) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!apiRef.current.state) {\n      warnOnce(['MUI X: `useGridSelector` has been called before the initialization of the state.', 'This hook can only be used inside the context of the grid.']);\n    }\n  }\n  const refs = useLazyRef(createRefs);\n  const didInit = refs.current.selector !== null;\n  const [state, setState] = React.useState(\n  // We don't use an initialization function to avoid allocations\n  didInit ? null : applySelector(apiRef, selector));\n  refs.current.state = state;\n  refs.current.equals = equals;\n  refs.current.selector = selector;\n  useOnMount(() => {\n    return apiRef.current.store.subscribe(() => {\n      const newState = applySelector(apiRef, refs.current.selector);\n      if (!refs.current.equals(refs.current.state, newState)) {\n        refs.current.state = newState;\n        setState(newState);\n      }\n    });\n  });\n  return state;\n};","map":{"version":3,"names":["React","fastObjectShallowCompare","useLazyRef","useOnMount","warnOnce","isOutputSelector","selector","acceptsApiRef","applySelector","apiRef","current","state","defaultCompare","Object","is","objectShallowCompare","createRefs","equals","useGridSelector","process","env","NODE_ENV","refs","didInit","setState","useState","store","subscribe","newState"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js"],"sourcesContent":["import * as React from 'react';\nimport { fastObjectShallowCompare } from '@mui/x-internals/fastObjectShallowCompare';\nimport { useLazyRef } from './useLazyRef';\nimport { useOnMount } from './useOnMount';\nimport { warnOnce } from '../../internals/utils/warning';\nfunction isOutputSelector(selector) {\n  return selector.acceptsApiRef;\n}\nfunction applySelector(apiRef, selector) {\n  if (isOutputSelector(selector)) {\n    return selector(apiRef);\n  }\n  return selector(apiRef.current.state);\n}\nconst defaultCompare = Object.is;\nexport const objectShallowCompare = fastObjectShallowCompare;\nconst createRefs = () => ({\n  state: null,\n  equals: null,\n  selector: null\n});\nexport const useGridSelector = (apiRef, selector, equals = defaultCompare) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!apiRef.current.state) {\n      warnOnce(['MUI X: `useGridSelector` has been called before the initialization of the state.', 'This hook can only be used inside the context of the grid.']);\n    }\n  }\n  const refs = useLazyRef(createRefs);\n  const didInit = refs.current.selector !== null;\n  const [state, setState] = React.useState(\n  // We don't use an initialization function to avoid allocations\n  didInit ? null : applySelector(apiRef, selector));\n  refs.current.state = state;\n  refs.current.equals = equals;\n  refs.current.selector = selector;\n  useOnMount(() => {\n    return apiRef.current.store.subscribe(() => {\n      const newState = applySelector(apiRef, refs.current.selector);\n      if (!refs.current.equals(refs.current.state, newState)) {\n        refs.current.state = newState;\n        setState(newState);\n      }\n    });\n  });\n  return state;\n};"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,wBAAwB,QAAQ,2CAA2C;AACpF,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,QAAQ,QAAQ,+BAA+B;AACxD,SAASC,gBAAgBA,CAACC,QAAQ,EAAE;EAClC,OAAOA,QAAQ,CAACC,aAAa;AAC/B;AACA,SAASC,aAAaA,CAACC,MAAM,EAAEH,QAAQ,EAAE;EACvC,IAAID,gBAAgB,CAACC,QAAQ,CAAC,EAAE;IAC9B,OAAOA,QAAQ,CAACG,MAAM,CAAC;EACzB;EACA,OAAOH,QAAQ,CAACG,MAAM,CAACC,OAAO,CAACC,KAAK,CAAC;AACvC;AACA,MAAMC,cAAc,GAAGC,MAAM,CAACC,EAAE;AAChC,OAAO,MAAMC,oBAAoB,GAAGd,wBAAwB;AAC5D,MAAMe,UAAU,GAAGA,CAAA,MAAO;EACxBL,KAAK,EAAE,IAAI;EACXM,MAAM,EAAE,IAAI;EACZX,QAAQ,EAAE;AACZ,CAAC,CAAC;AACF,OAAO,MAAMY,eAAe,GAAGA,CAACT,MAAM,EAAEH,QAAQ,EAAEW,MAAM,GAAGL,cAAc,KAAK;EAC5E,IAAIO,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAI,CAACZ,MAAM,CAACC,OAAO,CAACC,KAAK,EAAE;MACzBP,QAAQ,CAAC,CAAC,kFAAkF,EAAE,4DAA4D,CAAC,CAAC;IAC9J;EACF;EACA,MAAMkB,IAAI,GAAGpB,UAAU,CAACc,UAAU,CAAC;EACnC,MAAMO,OAAO,GAAGD,IAAI,CAACZ,OAAO,CAACJ,QAAQ,KAAK,IAAI;EAC9C,MAAM,CAACK,KAAK,EAAEa,QAAQ,CAAC,GAAGxB,KAAK,CAACyB,QAAQ;EACxC;EACAF,OAAO,GAAG,IAAI,GAAGf,aAAa,CAACC,MAAM,EAAEH,QAAQ,CAAC,CAAC;EACjDgB,IAAI,CAACZ,OAAO,CAACC,KAAK,GAAGA,KAAK;EAC1BW,IAAI,CAACZ,OAAO,CAACO,MAAM,GAAGA,MAAM;EAC5BK,IAAI,CAACZ,OAAO,CAACJ,QAAQ,GAAGA,QAAQ;EAChCH,UAAU,CAAC,MAAM;IACf,OAAOM,MAAM,CAACC,OAAO,CAACgB,KAAK,CAACC,SAAS,CAAC,MAAM;MAC1C,MAAMC,QAAQ,GAAGpB,aAAa,CAACC,MAAM,EAAEa,IAAI,CAACZ,OAAO,CAACJ,QAAQ,CAAC;MAC7D,IAAI,CAACgB,IAAI,CAACZ,OAAO,CAACO,MAAM,CAACK,IAAI,CAACZ,OAAO,CAACC,KAAK,EAAEiB,QAAQ,CAAC,EAAE;QACtDN,IAAI,CAACZ,OAAO,CAACC,KAAK,GAAGiB,QAAQ;QAC7BJ,QAAQ,CAACI,QAAQ,CAAC;MACpB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAOjB,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}