{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\", \"color\", \"error\", \"helperText\", \"size\", \"variant\"],\n  _excluded2 = [\"key\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport { unstable_useId as useId } from '@mui/utils';\nimport { getValueOptions, isSingleSelectColDef } from './filterPanelUtils';\nimport { useGridRootProps } from '../../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst filter = createFilterOptions();\nfunction GridFilterInputMultipleSingleSelect(props) {\n  var _resolvedColumn, _resolvedColumn2;\n  const {\n      item,\n      applyValue,\n      apiRef,\n      focusElementRef,\n      color,\n      error,\n      helperText,\n      size,\n      variant = 'standard'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const TextFieldProps = {\n    color,\n    error,\n    helperText,\n    size,\n    variant\n  };\n  const id = useId();\n  const rootProps = useGridRootProps();\n  let resolvedColumn = null;\n  if (item.field) {\n    const column = apiRef.current.getColumn(item.field);\n    if (isSingleSelectColDef(column)) {\n      resolvedColumn = column;\n    }\n  }\n  const getOptionValue = (_resolvedColumn = resolvedColumn) === null || _resolvedColumn === void 0 ? void 0 : _resolvedColumn.getOptionValue;\n  const getOptionLabel = (_resolvedColumn2 = resolvedColumn) === null || _resolvedColumn2 === void 0 ? void 0 : _resolvedColumn2.getOptionLabel;\n  const isOptionEqualToValue = React.useCallback((option, value) => getOptionValue(option) === getOptionValue(value), [getOptionValue]);\n  const resolvedValueOptions = React.useMemo(() => {\n    return getValueOptions(resolvedColumn) || [];\n  }, [resolvedColumn]);\n\n  // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useState, the Autocomplete could receive incoherent value and options\n  const filteredValues = React.useMemo(() => {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n    return item.value.reduce((acc, value) => {\n      const resolvedValue = resolvedValueOptions.find(v => getOptionValue(v) === value);\n      if (resolvedValue != null) {\n        acc.push(resolvedValue);\n      }\n      return acc;\n    }, []);\n  }, [getOptionValue, item.value, resolvedValueOptions]);\n  const handleChange = React.useCallback((event, value) => {\n    applyValue(_extends({}, item, {\n      value: value.map(getOptionValue)\n    }));\n  }, [applyValue, item, getOptionValue]);\n  return /*#__PURE__*/_jsx(Autocomplete, _extends({\n    multiple: true,\n    options: resolvedValueOptions,\n    isOptionEqualToValue: isOptionEqualToValue,\n    filterOptions: filter,\n    id: id,\n    value: filteredValues,\n    onChange: handleChange,\n    getOptionLabel: getOptionLabel,\n    renderTags: (value, getTagProps) => value.map((option, index) => {\n      const _getTagProps = getTagProps({\n          index\n        }),\n        {\n          key\n        } = _getTagProps,\n        tagProps = _objectWithoutPropertiesLoose(_getTagProps, _excluded2);\n      return /*#__PURE__*/_jsx(rootProps.slots.baseChip, _extends({\n        variant: \"outlined\",\n        size: \"small\",\n        label: getOptionLabel(option)\n      }, tagProps), key);\n    }),\n    renderInput: params => {\n      var _rootProps$slotProps;\n      return /*#__PURE__*/_jsx(rootProps.slots.baseTextField, _extends({}, params, {\n        label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n        placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n        InputLabelProps: _extends({}, params.InputLabelProps, {\n          shrink: true\n        }),\n        inputRef: focusElementRef,\n        type: \"singleSelect\"\n      }, TextFieldProps, (_rootProps$slotProps = rootProps.slotProps) === null || _rootProps$slotProps === void 0 ? void 0 : _rootProps$slotProps.baseTextField));\n    }\n  }, other));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }).isRequired,\n  applyValue: PropTypes.func.isRequired,\n  focusElementRef: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.func, PropTypes.object]),\n  item: PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operator: PropTypes.string.isRequired,\n    value: PropTypes.any\n  }).isRequired,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","PropTypes","Autocomplete","createFilterOptions","unstable_useId","useId","getValueOptions","isSingleSelectColDef","useGridRootProps","jsx","_jsx","filter","GridFilterInputMultipleSingleSelect","props","_resolvedColumn","_resolvedColumn2","item","applyValue","apiRef","focusElementRef","color","error","helperText","size","variant","other","TextFieldProps","id","rootProps","resolvedColumn","field","column","current","getColumn","getOptionValue","getOptionLabel","isOptionEqualToValue","useCallback","option","value","resolvedValueOptions","useMemo","filteredValues","Array","isArray","reduce","acc","resolvedValue","find","v","push","handleChange","event","map","multiple","options","filterOptions","onChange","renderTags","getTagProps","index","_getTagProps","key","tagProps","slots","baseChip","label","renderInput","params","_rootProps$slotProps","baseTextField","getLocaleText","placeholder","InputLabelProps","shrink","inputRef","type","slotProps","process","env","NODE_ENV","propTypes","shape","object","isRequired","func","oneOfType","string","number","operator","any","oneOf"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleSingleSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\", \"color\", \"error\", \"helperText\", \"size\", \"variant\"],\n  _excluded2 = [\"key\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport { unstable_useId as useId } from '@mui/utils';\nimport { getValueOptions, isSingleSelectColDef } from './filterPanelUtils';\nimport { useGridRootProps } from '../../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst filter = createFilterOptions();\nfunction GridFilterInputMultipleSingleSelect(props) {\n  const {\n      item,\n      applyValue,\n      apiRef,\n      focusElementRef,\n      color,\n      error,\n      helperText,\n      size,\n      variant = 'standard'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const TextFieldProps = {\n    color,\n    error,\n    helperText,\n    size,\n    variant\n  };\n  const id = useId();\n  const rootProps = useGridRootProps();\n  let resolvedColumn = null;\n  if (item.field) {\n    const column = apiRef.current.getColumn(item.field);\n    if (isSingleSelectColDef(column)) {\n      resolvedColumn = column;\n    }\n  }\n  const getOptionValue = resolvedColumn?.getOptionValue;\n  const getOptionLabel = resolvedColumn?.getOptionLabel;\n  const isOptionEqualToValue = React.useCallback((option, value) => getOptionValue(option) === getOptionValue(value), [getOptionValue]);\n  const resolvedValueOptions = React.useMemo(() => {\n    return getValueOptions(resolvedColumn) || [];\n  }, [resolvedColumn]);\n\n  // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useState, the Autocomplete could receive incoherent value and options\n  const filteredValues = React.useMemo(() => {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n    return item.value.reduce((acc, value) => {\n      const resolvedValue = resolvedValueOptions.find(v => getOptionValue(v) === value);\n      if (resolvedValue != null) {\n        acc.push(resolvedValue);\n      }\n      return acc;\n    }, []);\n  }, [getOptionValue, item.value, resolvedValueOptions]);\n  const handleChange = React.useCallback((event, value) => {\n    applyValue(_extends({}, item, {\n      value: value.map(getOptionValue)\n    }));\n  }, [applyValue, item, getOptionValue]);\n  return /*#__PURE__*/_jsx(Autocomplete, _extends({\n    multiple: true,\n    options: resolvedValueOptions,\n    isOptionEqualToValue: isOptionEqualToValue,\n    filterOptions: filter,\n    id: id,\n    value: filteredValues,\n    onChange: handleChange,\n    getOptionLabel: getOptionLabel,\n    renderTags: (value, getTagProps) => value.map((option, index) => {\n      const _getTagProps = getTagProps({\n          index\n        }),\n        {\n          key\n        } = _getTagProps,\n        tagProps = _objectWithoutPropertiesLoose(_getTagProps, _excluded2);\n      return /*#__PURE__*/_jsx(rootProps.slots.baseChip, _extends({\n        variant: \"outlined\",\n        size: \"small\",\n        label: getOptionLabel(option)\n      }, tagProps), key);\n    }),\n    renderInput: params => /*#__PURE__*/_jsx(rootProps.slots.baseTextField, _extends({}, params, {\n      label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n      placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n      InputLabelProps: _extends({}, params.InputLabelProps, {\n        shrink: true\n      }),\n      inputRef: focusElementRef,\n      type: \"singleSelect\"\n    }, TextFieldProps, rootProps.slotProps?.baseTextField))\n  }, other));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }).isRequired,\n  applyValue: PropTypes.func.isRequired,\n  focusElementRef: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.func, PropTypes.object]),\n  item: PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operator: PropTypes.string.isRequired,\n    value: PropTypes.any\n  }).isRequired,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}