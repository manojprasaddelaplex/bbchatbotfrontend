{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport { gridFilteredTopLevelRowCountSelector } from '../filter';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPaginationRowCountSelector, gridPaginationMetaSelector, gridPaginationModelSelector } from './gridPaginationSelector';\nexport const useGridRowCount = (apiRef, props) => {\n  var _props$initialState2;\n  const logger = useGridLogger(apiRef, 'useGridRowCount');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);\n  const rowCountState = useGridSelector(apiRef, gridPaginationRowCountSelector);\n  const paginationMeta = useGridSelector(apiRef, gridPaginationMetaSelector);\n  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n  const previousPageSize = useLazyRef(() => gridPaginationModelSelector(apiRef).pageSize);\n  apiRef.current.registerControlState({\n    stateId: 'paginationRowCount',\n    propModel: props.rowCount,\n    propOnChange: props.onRowCountChange,\n    stateSelector: gridPaginationRowCountSelector,\n    changeEvent: 'rowCountChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setRowCount = React.useCallback(newRowCount => {\n    if (rowCountState === newRowCount) {\n      return;\n    }\n    logger.debug(\"Setting 'rowCount' to\", newRowCount);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        rowCount: newRowCount\n      })\n    }));\n  }, [apiRef, logger, rowCountState]);\n  const paginationRowCountApi = {\n    setRowCount\n  };\n  useGridApiMethod(apiRef, paginationRowCountApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState;\n    const exportedRowCount = gridPaginationRowCountSelector(apiRef);\n    const shouldExportRowCount =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `rowCount` is controlled\n    props.rowCount != null ||\n    // Always export if the `rowCount` has been initialized\n    ((_props$initialState = props.initialState) === null || _props$initialState === void 0 || (_props$initialState = _props$initialState.pagination) === null || _props$initialState === void 0 ? void 0 : _props$initialState.rowCount) != null;\n    if (!shouldExportRowCount) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        rowCount: exportedRowCount\n      })\n    });\n  }, [apiRef, props.rowCount, (_props$initialState2 = props.initialState) === null || _props$initialState2 === void 0 || (_props$initialState2 = _props$initialState2.pagination) === null || _props$initialState2 === void 0 ? void 0 : _props$initialState2.rowCount]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    const restoredRowCount = (_context$stateToResto = context.stateToRestore.pagination) !== null && _context$stateToResto !== void 0 && _context$stateToResto.rowCount ? context.stateToRestore.pagination.rowCount : gridPaginationRowCountSelector(apiRef);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        rowCount: restoredRowCount\n      })\n    }));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const handlePaginationModelChange = React.useCallback(model => {\n    if (props.paginationMode === 'client' || !previousPageSize.current) {\n      return;\n    }\n    if (model.pageSize !== previousPageSize.current) {\n      previousPageSize.current = model.pageSize;\n      if (rowCountState === -1) {\n        // Row count unknown and page size changed, reset the page\n        apiRef.current.setPage(0);\n      }\n    }\n  }, [props.paginationMode, previousPageSize, rowCountState, apiRef]);\n  useGridApiEventHandler(apiRef, 'paginationModelChange', handlePaginationModelChange);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.paginationMode === 'client') {\n      apiRef.current.setRowCount(visibleTopLevelRowCount);\n    } else if (props.rowCount != null) {\n      apiRef.current.setRowCount(props.rowCount);\n    }\n  }, [apiRef, props.paginationMode, visibleTopLevelRowCount, props.rowCount]);\n  const isLastPage = paginationMeta.hasNextPage === false;\n  React.useEffect(() => {\n    if (isLastPage && rowCountState === -1) {\n      apiRef.current.setRowCount(paginationModel.pageSize * paginationModel.page + visibleTopLevelRowCount);\n    }\n  }, [apiRef, visibleTopLevelRowCount, isLastPage, rowCountState, paginationModel]);\n};","map":{"version":3,"names":["_extends","React","useLazyRef","gridFilteredTopLevelRowCountSelector","useGridLogger","useGridSelector","useGridApiMethod","useGridApiEventHandler","useGridRegisterPipeProcessor","gridPaginationRowCountSelector","gridPaginationMetaSelector","gridPaginationModelSelector","useGridRowCount","apiRef","props","_props$initialState2","logger","visibleTopLevelRowCount","rowCountState","paginationMeta","paginationModel","previousPageSize","pageSize","current","registerControlState","stateId","propModel","rowCount","propOnChange","onRowCountChange","stateSelector","changeEvent","setRowCount","useCallback","newRowCount","debug","setState","state","pagination","paginationRowCountApi","stateExportPreProcessing","prevState","context","_props$initialState","exportedRowCount","shouldExportRowCount","exportOnlyDirtyModels","initialState","stateRestorePreProcessing","params","_context$stateToResto","restoredRowCount","stateToRestore","handlePaginationModelChange","model","paginationMode","setPage","useEffect","isLastPage","hasNextPage","page"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridRowCount.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport { gridFilteredTopLevelRowCountSelector } from '../filter';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPaginationRowCountSelector, gridPaginationMetaSelector, gridPaginationModelSelector } from './gridPaginationSelector';\nexport const useGridRowCount = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridRowCount');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);\n  const rowCountState = useGridSelector(apiRef, gridPaginationRowCountSelector);\n  const paginationMeta = useGridSelector(apiRef, gridPaginationMetaSelector);\n  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n  const previousPageSize = useLazyRef(() => gridPaginationModelSelector(apiRef).pageSize);\n  apiRef.current.registerControlState({\n    stateId: 'paginationRowCount',\n    propModel: props.rowCount,\n    propOnChange: props.onRowCountChange,\n    stateSelector: gridPaginationRowCountSelector,\n    changeEvent: 'rowCountChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setRowCount = React.useCallback(newRowCount => {\n    if (rowCountState === newRowCount) {\n      return;\n    }\n    logger.debug(\"Setting 'rowCount' to\", newRowCount);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        rowCount: newRowCount\n      })\n    }));\n  }, [apiRef, logger, rowCountState]);\n  const paginationRowCountApi = {\n    setRowCount\n  };\n  useGridApiMethod(apiRef, paginationRowCountApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const exportedRowCount = gridPaginationRowCountSelector(apiRef);\n    const shouldExportRowCount =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `rowCount` is controlled\n    props.rowCount != null ||\n    // Always export if the `rowCount` has been initialized\n    props.initialState?.pagination?.rowCount != null;\n    if (!shouldExportRowCount) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        rowCount: exportedRowCount\n      })\n    });\n  }, [apiRef, props.rowCount, props.initialState?.pagination?.rowCount]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const restoredRowCount = context.stateToRestore.pagination?.rowCount ? context.stateToRestore.pagination.rowCount : gridPaginationRowCountSelector(apiRef);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        rowCount: restoredRowCount\n      })\n    }));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const handlePaginationModelChange = React.useCallback(model => {\n    if (props.paginationMode === 'client' || !previousPageSize.current) {\n      return;\n    }\n    if (model.pageSize !== previousPageSize.current) {\n      previousPageSize.current = model.pageSize;\n      if (rowCountState === -1) {\n        // Row count unknown and page size changed, reset the page\n        apiRef.current.setPage(0);\n      }\n    }\n  }, [props.paginationMode, previousPageSize, rowCountState, apiRef]);\n  useGridApiEventHandler(apiRef, 'paginationModelChange', handlePaginationModelChange);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.paginationMode === 'client') {\n      apiRef.current.setRowCount(visibleTopLevelRowCount);\n    } else if (props.rowCount != null) {\n      apiRef.current.setRowCount(props.rowCount);\n    }\n  }, [apiRef, props.paginationMode, visibleTopLevelRowCount, props.rowCount]);\n  const isLastPage = paginationMeta.hasNextPage === false;\n  React.useEffect(() => {\n    if (isLastPage && rowCountState === -1) {\n      apiRef.current.setRowCount(paginationModel.pageSize * paginationModel.page + visibleTopLevelRowCount);\n    }\n  }, [apiRef, visibleTopLevelRowCount, isLastPage, rowCountState, paginationModel]);\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,SAASC,oCAAoC,QAAQ,WAAW;AAChE,SAASC,aAAa,EAAEC,eAAe,EAAEC,gBAAgB,EAAEC,sBAAsB,QAAQ,aAAa;AACtG,SAASC,4BAA4B,QAAQ,2BAA2B;AACxE,SAASC,8BAA8B,EAAEC,0BAA0B,EAAEC,2BAA2B,QAAQ,0BAA0B;AAClI,OAAO,MAAMC,eAAe,GAAGA,CAACC,MAAM,EAAEC,KAAK,KAAK;EAAA,IAAAC,oBAAA;EAChD,MAAMC,MAAM,GAAGZ,aAAa,CAACS,MAAM,EAAE,iBAAiB,CAAC;EACvD,MAAMI,uBAAuB,GAAGZ,eAAe,CAACQ,MAAM,EAAEV,oCAAoC,CAAC;EAC7F,MAAMe,aAAa,GAAGb,eAAe,CAACQ,MAAM,EAAEJ,8BAA8B,CAAC;EAC7E,MAAMU,cAAc,GAAGd,eAAe,CAACQ,MAAM,EAAEH,0BAA0B,CAAC;EAC1E,MAAMU,eAAe,GAAGf,eAAe,CAACQ,MAAM,EAAEF,2BAA2B,CAAC;EAC5E,MAAMU,gBAAgB,GAAGnB,UAAU,CAAC,MAAMS,2BAA2B,CAACE,MAAM,CAAC,CAACS,QAAQ,CAAC;EACvFT,MAAM,CAACU,OAAO,CAACC,oBAAoB,CAAC;IAClCC,OAAO,EAAE,oBAAoB;IAC7BC,SAAS,EAAEZ,KAAK,CAACa,QAAQ;IACzBC,YAAY,EAAEd,KAAK,CAACe,gBAAgB;IACpCC,aAAa,EAAErB,8BAA8B;IAC7CsB,WAAW,EAAE;EACf,CAAC,CAAC;;EAEF;AACF;AACA;EACE,MAAMC,WAAW,GAAG/B,KAAK,CAACgC,WAAW,CAACC,WAAW,IAAI;IACnD,IAAIhB,aAAa,KAAKgB,WAAW,EAAE;MACjC;IACF;IACAlB,MAAM,CAACmB,KAAK,CAAC,uBAAuB,EAAED,WAAW,CAAC;IAClDrB,MAAM,CAACU,OAAO,CAACa,QAAQ,CAACC,KAAK,IAAIrC,QAAQ,CAAC,CAAC,CAAC,EAAEqC,KAAK,EAAE;MACnDC,UAAU,EAAEtC,QAAQ,CAAC,CAAC,CAAC,EAAEqC,KAAK,CAACC,UAAU,EAAE;QACzCX,QAAQ,EAAEO;MACZ,CAAC;IACH,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAACrB,MAAM,EAAEG,MAAM,EAAEE,aAAa,CAAC,CAAC;EACnC,MAAMqB,qBAAqB,GAAG;IAC5BP;EACF,CAAC;EACD1B,gBAAgB,CAACO,MAAM,EAAE0B,qBAAqB,EAAE,QAAQ,CAAC;;EAEzD;AACF;AACA;EACE,MAAMC,wBAAwB,GAAGvC,KAAK,CAACgC,WAAW,CAAC,CAACQ,SAAS,EAAEC,OAAO,KAAK;IAAA,IAAAC,mBAAA;IACzE,MAAMC,gBAAgB,GAAGnC,8BAA8B,CAACI,MAAM,CAAC;IAC/D,MAAMgC,oBAAoB;IAC1B;IACA,CAACH,OAAO,CAACI,qBAAqB;IAC9B;IACAhC,KAAK,CAACa,QAAQ,IAAI,IAAI;IACtB;IACA,EAAAgB,mBAAA,GAAA7B,KAAK,CAACiC,YAAY,cAAAJ,mBAAA,gBAAAA,mBAAA,GAAlBA,mBAAA,CAAoBL,UAAU,cAAAK,mBAAA,uBAA9BA,mBAAA,CAAgChB,QAAQ,KAAI,IAAI;IAChD,IAAI,CAACkB,oBAAoB,EAAE;MACzB,OAAOJ,SAAS;IAClB;IACA,OAAOzC,QAAQ,CAAC,CAAC,CAAC,EAAEyC,SAAS,EAAE;MAC7BH,UAAU,EAAEtC,QAAQ,CAAC,CAAC,CAAC,EAAEyC,SAAS,CAACH,UAAU,EAAE;QAC7CX,QAAQ,EAAEiB;MACZ,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC/B,MAAM,EAAEC,KAAK,CAACa,QAAQ,GAAAZ,oBAAA,GAAED,KAAK,CAACiC,YAAY,cAAAhC,oBAAA,gBAAAA,oBAAA,GAAlBA,oBAAA,CAAoBuB,UAAU,cAAAvB,oBAAA,uBAA9BA,oBAAA,CAAgCY,QAAQ,CAAC,CAAC;EACtE,MAAMqB,yBAAyB,GAAG/C,KAAK,CAACgC,WAAW,CAAC,CAACgB,MAAM,EAAEP,OAAO,KAAK;IAAA,IAAAQ,qBAAA;IACvE,MAAMC,gBAAgB,GAAG,CAAAD,qBAAA,GAAAR,OAAO,CAACU,cAAc,CAACd,UAAU,cAAAY,qBAAA,eAAjCA,qBAAA,CAAmCvB,QAAQ,GAAGe,OAAO,CAACU,cAAc,CAACd,UAAU,CAACX,QAAQ,GAAGlB,8BAA8B,CAACI,MAAM,CAAC;IAC1JA,MAAM,CAACU,OAAO,CAACa,QAAQ,CAACC,KAAK,IAAIrC,QAAQ,CAAC,CAAC,CAAC,EAAEqC,KAAK,EAAE;MACnDC,UAAU,EAAEtC,QAAQ,CAAC,CAAC,CAAC,EAAEqC,KAAK,CAACC,UAAU,EAAE;QACzCX,QAAQ,EAAEwB;MACZ,CAAC;IACH,CAAC,CAAC,CAAC;IACH,OAAOF,MAAM;EACf,CAAC,EAAE,CAACpC,MAAM,CAAC,CAAC;EACZL,4BAA4B,CAACK,MAAM,EAAE,aAAa,EAAE2B,wBAAwB,CAAC;EAC7EhC,4BAA4B,CAACK,MAAM,EAAE,cAAc,EAAEmC,yBAAyB,CAAC;;EAE/E;AACF;AACA;EACE,MAAMK,2BAA2B,GAAGpD,KAAK,CAACgC,WAAW,CAACqB,KAAK,IAAI;IAC7D,IAAIxC,KAAK,CAACyC,cAAc,KAAK,QAAQ,IAAI,CAAClC,gBAAgB,CAACE,OAAO,EAAE;MAClE;IACF;IACA,IAAI+B,KAAK,CAAChC,QAAQ,KAAKD,gBAAgB,CAACE,OAAO,EAAE;MAC/CF,gBAAgB,CAACE,OAAO,GAAG+B,KAAK,CAAChC,QAAQ;MACzC,IAAIJ,aAAa,KAAK,CAAC,CAAC,EAAE;QACxB;QACAL,MAAM,CAACU,OAAO,CAACiC,OAAO,CAAC,CAAC,CAAC;MAC3B;IACF;EACF,CAAC,EAAE,CAAC1C,KAAK,CAACyC,cAAc,EAAElC,gBAAgB,EAAEH,aAAa,EAAEL,MAAM,CAAC,CAAC;EACnEN,sBAAsB,CAACM,MAAM,EAAE,uBAAuB,EAAEwC,2BAA2B,CAAC;;EAEpF;AACF;AACA;EACEpD,KAAK,CAACwD,SAAS,CAAC,MAAM;IACpB,IAAI3C,KAAK,CAACyC,cAAc,KAAK,QAAQ,EAAE;MACrC1C,MAAM,CAACU,OAAO,CAACS,WAAW,CAACf,uBAAuB,CAAC;IACrD,CAAC,MAAM,IAAIH,KAAK,CAACa,QAAQ,IAAI,IAAI,EAAE;MACjCd,MAAM,CAACU,OAAO,CAACS,WAAW,CAAClB,KAAK,CAACa,QAAQ,CAAC;IAC5C;EACF,CAAC,EAAE,CAACd,MAAM,EAAEC,KAAK,CAACyC,cAAc,EAAEtC,uBAAuB,EAAEH,KAAK,CAACa,QAAQ,CAAC,CAAC;EAC3E,MAAM+B,UAAU,GAAGvC,cAAc,CAACwC,WAAW,KAAK,KAAK;EACvD1D,KAAK,CAACwD,SAAS,CAAC,MAAM;IACpB,IAAIC,UAAU,IAAIxC,aAAa,KAAK,CAAC,CAAC,EAAE;MACtCL,MAAM,CAACU,OAAO,CAACS,WAAW,CAACZ,eAAe,CAACE,QAAQ,GAAGF,eAAe,CAACwC,IAAI,GAAG3C,uBAAuB,CAAC;IACvG;EACF,CAAC,EAAE,CAACJ,MAAM,EAAEI,uBAAuB,EAAEyC,UAAU,EAAExC,aAAa,EAAEE,eAAe,CAAC,CAAC;AACnF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}