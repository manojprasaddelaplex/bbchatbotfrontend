{"ast":null,"code":"import { useGridSelector } from '../../utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { gridExpandedRowCountSelector } from '../filter';\nimport { gridRowCountSelector, gridRowsLoadingSelector } from '../rows';\n/**\n * Uses the grid state to determine which overlay to display.\n * Returns the active overlay type and the active loading overlay variant.\n */\nexport const useGridOverlays = () => {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const visibleRowCount = useGridSelector(apiRef, gridExpandedRowCountSelector);\n  const noRows = totalRowCount === 0;\n  const loading = useGridSelector(apiRef, gridRowsLoadingSelector);\n  const showNoRowsOverlay = !loading && noRows;\n  const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;\n  let overlayType = null;\n  let loadingOverlayVariant = null;\n  if (showNoRowsOverlay) {\n    overlayType = 'noRowsOverlay';\n  }\n  if (showNoResultsOverlay) {\n    overlayType = 'noResultsOverlay';\n  }\n  if (loading) {\n    var _rootProps$slotProps;\n    overlayType = 'loadingOverlay';\n    loadingOverlayVariant = ((_rootProps$slotProps = rootProps.slotProps) === null || _rootProps$slotProps === void 0 || (_rootProps$slotProps = _rootProps$slotProps.loadingOverlay) === null || _rootProps$slotProps === void 0 ? void 0 : _rootProps$slotProps[noRows ? 'noRowsVariant' : 'variant']) || null;\n  }\n  return {\n    overlayType,\n    loadingOverlayVariant\n  };\n};","map":{"version":3,"names":["useGridSelector","useGridApiContext","useGridRootProps","gridExpandedRowCountSelector","gridRowCountSelector","gridRowsLoadingSelector","useGridOverlays","apiRef","rootProps","totalRowCount","visibleRowCount","noRows","loading","showNoRowsOverlay","showNoResultsOverlay","overlayType","loadingOverlayVariant","_rootProps$slotProps","slotProps","loadingOverlay"],"sources":["E:/OneDrive - delaPlex/Project/BlueBerry/ChatGpt/21Aug24/Blueberry-bot/frontend/node_modules/@mui/x-data-grid/hooks/features/overlays/useGridOverlays.js"],"sourcesContent":["import { useGridSelector } from '../../utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { gridExpandedRowCountSelector } from '../filter';\nimport { gridRowCountSelector, gridRowsLoadingSelector } from '../rows';\n/**\n * Uses the grid state to determine which overlay to display.\n * Returns the active overlay type and the active loading overlay variant.\n */\nexport const useGridOverlays = () => {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const visibleRowCount = useGridSelector(apiRef, gridExpandedRowCountSelector);\n  const noRows = totalRowCount === 0;\n  const loading = useGridSelector(apiRef, gridRowsLoadingSelector);\n  const showNoRowsOverlay = !loading && noRows;\n  const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;\n  let overlayType = null;\n  let loadingOverlayVariant = null;\n  if (showNoRowsOverlay) {\n    overlayType = 'noRowsOverlay';\n  }\n  if (showNoResultsOverlay) {\n    overlayType = 'noResultsOverlay';\n  }\n  if (loading) {\n    overlayType = 'loadingOverlay';\n    loadingOverlayVariant = rootProps.slotProps?.loadingOverlay?.[noRows ? 'noRowsVariant' : 'variant'] || null;\n  }\n  return {\n    overlayType,\n    loadingOverlayVariant\n  };\n};"],"mappings":"AAAA,SAASA,eAAe,QAAQ,aAAa;AAC7C,SAASC,iBAAiB,QAAQ,+BAA+B;AACjE,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,4BAA4B,QAAQ,WAAW;AACxD,SAASC,oBAAoB,EAAEC,uBAAuB,QAAQ,SAAS;AACvE;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMC,MAAM,GAAGN,iBAAiB,CAAC,CAAC;EAClC,MAAMO,SAAS,GAAGN,gBAAgB,CAAC,CAAC;EACpC,MAAMO,aAAa,GAAGT,eAAe,CAACO,MAAM,EAAEH,oBAAoB,CAAC;EACnE,MAAMM,eAAe,GAAGV,eAAe,CAACO,MAAM,EAAEJ,4BAA4B,CAAC;EAC7E,MAAMQ,MAAM,GAAGF,aAAa,KAAK,CAAC;EAClC,MAAMG,OAAO,GAAGZ,eAAe,CAACO,MAAM,EAAEF,uBAAuB,CAAC;EAChE,MAAMQ,iBAAiB,GAAG,CAACD,OAAO,IAAID,MAAM;EAC5C,MAAMG,oBAAoB,GAAG,CAACF,OAAO,IAAIH,aAAa,GAAG,CAAC,IAAIC,eAAe,KAAK,CAAC;EACnF,IAAIK,WAAW,GAAG,IAAI;EACtB,IAAIC,qBAAqB,GAAG,IAAI;EAChC,IAAIH,iBAAiB,EAAE;IACrBE,WAAW,GAAG,eAAe;EAC/B;EACA,IAAID,oBAAoB,EAAE;IACxBC,WAAW,GAAG,kBAAkB;EAClC;EACA,IAAIH,OAAO,EAAE;IAAA,IAAAK,oBAAA;IACXF,WAAW,GAAG,gBAAgB;IAC9BC,qBAAqB,GAAG,EAAAC,oBAAA,GAAAT,SAAS,CAACU,SAAS,cAAAD,oBAAA,gBAAAA,oBAAA,GAAnBA,oBAAA,CAAqBE,cAAc,cAAAF,oBAAA,uBAAnCA,oBAAA,CAAsCN,MAAM,GAAG,eAAe,GAAG,SAAS,CAAC,KAAI,IAAI;EAC7G;EACA,OAAO;IACLI,WAAW;IACXC;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}